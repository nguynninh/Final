;/*
; * bai1.c
; *
; * Created: 12/8/2022 9:06:36 PM
; * Author: Who
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <glcd.h>
;#include <font5x7.h>
;#include <stdio.h>
;#include <stdlib.h>
;#include <eeprom.h>
;
;// macro for easier usage
;#define read_eeprom_word(address) eeprom_read_word ((const unsigned int*)address)
;#define write_eeprom_word(address,value) eeprom_write_word ((unsigned int*)address,(unsigned int)value)
;#define update_eeprom_word(address,value) eeprom_update_word ((unsigned int*)address,(unsigned int)value)
;unsigned int EEMEM my_eeprom;
;
;int keypad[3][3] = {1,2,3,4,5,6,7,8,9};

	.DSEG
;char tmp[10];
;int miss = 0;
;int counter = 0;
;int dem_sai = 0;
;
;// Timer 0 overflow interrupt service routine with 1 ms
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F     TCNT0=0x06;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0020     // Place your code here
; 0000 0021     if (miss >= 3) {
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0022         if (counter == 2000)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0023             counter  = 0;
;PCODE: $00000017 VOL: 0
; 0000 0024 
; 0000 0025         if (counter == 0) {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0026             PORTD.4 = 0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0027             PORTD.5 = 1;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0028         }
; 0000 0029 
; 0000 002A         if (counter == 1000) {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002B             PORTD.5 = 0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002C             PORTD.4 = 1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002D         }
; 0000 002E         counter++;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002F     }
; 0000 0030     else {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0031         PORTD.4 = 0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0032         PORTD.5 = 0;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0033     }
;PCODE: $00000031 VOL: 0
; 0000 0034 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;
;// "inherited" from tai lieu thuc hanh
;int read() {
; 0000 0038 int read() {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0039     char a, i, j;
; 0000 003A     for(j = 0; j < 3; j++ ){
;PCODE: $00000037 VOL: 0
;	a -> R17
;	i -> R16
;	j -> R19
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003B         if (j == 0) PORTF = 0b11111101;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003C         if (j == 1) PORTF = 0b11110111;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 003D         if (j == 2) PORTF = 0b11011111;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 003E         for(i = 0; i < 3; i++){
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 003F             if (i == 0){
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0040                 a = PINF&0x04;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0041                 if(a != 0x04)
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0042                     return keypad[i][j];
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0043             }
;PCODE: $0000006F VOL: 0
; 0000 0044             if (i == 1){
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0045                 a = PINF&0x10;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0046                 if (a != 0x10)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0047                     return keypad[i][j];
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0048             }
;PCODE: $00000086 VOL: 0
; 0000 0049             if (i == 2){
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 004A                 a = PINF&0x01;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 004B                 if (a != 0x01)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 004C                     return keypad[i][j];
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 004D             }
;PCODE: $0000009D VOL: 0
; 0000 004E         }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 004F     }
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0050     return -1;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0051 }
;PCODE: $000000AD VOL: 0
;
;void mainScreen(unsigned char * c, int pass) {
; 0000 0053 void mainScreen(unsigned char * c, int pass) {
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0054     glcd_clear();
;PCODE: $000000B0 VOL: 0
;	*c -> Y+2
;	pass -> Y+0
;PCODE: $000000B1 VOL: 0
; 0000 0055     glcd_outtextxy(15, 20, c);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0056     if (pass != -1) {
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0057         itoa(pass, tmp);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0058         glcd_outtextxy(30, 30, tmp);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0059     }
; 0000 005A }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;
;void mainScreen2(unsigned char * c, char pass[], int pos) {
; 0000 005C void mainScreen2(unsigned char * c, char pass[], int pos) {
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 005D     glcd_clear();
;PCODE: $000000CB VOL: 0
;	*c -> Y+4
;	pass -> Y+2
;	pos -> Y+0
;PCODE: $000000CC VOL: 0
; 0000 005E     glcd_outtextxy(15, 20, c);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 005F     if (pass != -1) {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0060         glcd_outtextxy(pos, 30, pass);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0061     }
; 0000 0062 }
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;
;void mainScreen3(unsigned char * c, int pass, int pos, char pass_ano[]) {
; 0000 0064 void mainScreen3(unsigned char * c, int pass, int pos, char pass_ano[]) {
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0065     glcd_clear();
;PCODE: $000000E2 VOL: 0
;	*c -> Y+6
;	pass -> Y+4
;	pos -> Y+2
;	pass_ano -> Y+0
;PCODE: $000000E3 VOL: 0
; 0000 0066     glcd_outtextxy(15, 20, c);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0067     if (pass != -1) {
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0068         itoa(pass, tmp);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0069         glcd_outtextxy(30, 30, pass_ano);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 006A         glcd_outtextxy(pos, 30, tmp);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 006B     }
; 0000 006C }
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;
;void exe() {
; 0000 006E void exe() {
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 006F     //char pass_ano[3];
; 0000 0070     unsigned int input_times = 0, input = -1, pass = 0, require = 118, reader;
; 0000 0071     reader = read_eeprom_word(&my_eeprom);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;	input_times -> R16,R17
;	input -> R18,R19
;	pass -> R20,R21
;	require -> Y+8
;	reader -> Y+6
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0072     if (reader >= 100 && reader <= 999)
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0073         require = reader;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0074     dem_sai = 0;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0075     while (pass != require) {
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0076         char pass_ano[3];
; 0000 0077         pass_ano[0]=' ';
;PCODE: $00000124 VOL: 0
;	require -> Y+11
;	reader -> Y+9
;	pass_ano -> Y+0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0078         pass_ano[1]=' ';
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0079         pass_ano[2]=' ';
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 007A         mainScreen("PASSWORD?", -1);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 007B         while (input_times != 3) {
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 007C             input = read();
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 007D             delay_ms(200);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 007E             if (input != -1) {
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 007F                 input_times++;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0080                 pass = pass * 10 + input;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0081                 mainScreen2("PASSWORD?", pass_ano, 30);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0082                 mainScreen3("PASSWORD?", input, 30+(input_times-1)*4+input_times, pass_ano);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0083                 pass_ano[input_times-1] = '*';
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0084                 delay_ms(500);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0085                 mainScreen2("PASSWORD?", pass_ano, 30);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0086                 input = -1;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0087             }
; 0000 0088         }
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0089 
; 0000 008A         if (pass != require) {
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 008B             glcd_clear();
;PCODE: $0000016E VOL: 0
; 0000 008C             glcd_outtextxy(15, 20, "NO?");
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 008D             input_times = 0;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 008E             input = -1;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 008F             pass = 0;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0090             delay_ms(800);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0091             dem_sai++;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0092         }
; 0000 0093         miss++;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0094         // turn on role 1
; 0000 0095         if (miss == 3) {
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0096             DDRC.3 = 1;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0097             PORTC.3 = 1;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0098         }
; 0000 0099     }
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 009A 
; 0000 009B     miss = 0;
;PCODE: $00000190 VOL: 0
; 0000 009C     delay_ms(500);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 009D     glcd_clear();
;PCODE: $00000193 VOL: 0
; 0000 009E     PORTC.3 = 0;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 009F     glcd_outtextxy(15, 20, "PASSED");
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00A0 }
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0

	.DSEG
_0x2D:
	.BYTE 0x33
;
;void main(void)
; 0000 00A3 {

	.CSEG
;PCODE: $000001A1 VOL: 0
; 0000 00A4     unsigned int pass = 0, input, input_times = 0;
; 0000 00A5     //init GLCD
; 0000 00A6     GLCDINIT_t glcd_init_data;
; 0000 00A7     glcd_init_data.font=font5x7;
;PCODE: $000001A2 VOL: 0
;	pass -> R16,R17
;	input -> R18,R19
;	input_times -> R20,R21
;	glcd_init_data -> Y+0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00A8     glcd_init_data.temp_coef=140;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00A9     glcd_init_data.bias=4;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00AA     glcd_init_data.vlcd=66;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00AB     glcd_init(&glcd_init_data);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00AC 
; 0000 00AD     DDRF = 0b11101010;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00AE     DDRD.5 = 1;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00AF     DDRD.4 = 1;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00B0 
; 0000 00B1     //init Timer/Counter 0 with time period = 1 ms
; 0000 00B2     ASSR=0<<AS0;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00B3     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00B4     TCNT0=0x06;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00B5     OCR0=0x00;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00B6     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00B7     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00B8     #asm("sei")
;PCODE: $000001C9 VOL: 0
	sei
;PCODE: $000001CA VOL: 0
; 0000 00B9     update_eeprom_word(&my_eeprom, 123);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 00BA     exe();
;PCODE: $000001CE VOL: 0
; 0000 00BB     delay_ms(1500);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 00BC 
; 0000 00BD     mainScreen("NEW PASS?", -1);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 00BE     while (input_times != 3) {
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 00BF             input = read();
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00C0             delay_ms(200);
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00C1             if (input != -1) {
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00C2                 input_times++;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00C3                 pass = pass * 10 + input;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00C4                 mainScreen("NEW PASS?", pass);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 00C5                 input = -1;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00C6             }
; 0000 00C7     }
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 00C8     update_eeprom_word(&my_eeprom, pass);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 00C9     delay_ms(800);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 00CA     mainScreen("SAVED", -1);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 00CB 
; 0000 00CC     while (1)
;PCODE: $000001FC VOL: 0
; 0000 00CD     {
; 0000 00CE 
; 0000 00CF 
; 0000 00D0     }
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 00D1 }
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0

	.DSEG
_0x3E:
	.BYTE 0x1A
