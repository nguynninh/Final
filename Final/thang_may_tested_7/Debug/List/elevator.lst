
AVRASM ver. 2.1.30  D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm Sat Dec 21 16:20:23 2024

D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1091): warning: Register r5 already defined by the .DEF directive
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1093): warning: Register r7 already defined by the .DEF directive
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1094): warning: Register r8 already defined by the .DEF directive
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1095): warning: Register r9 already defined by the .DEF directive
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1096): warning: Register r11 already defined by the .DEF directive
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1097): warning: Register r12 already defined by the .DEF directive
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1098): warning: Register r13 already defined by the .DEF directive
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1099): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _dem=R4
                 	.DEF _dem_msb=R5
                 	.DEF _vi_tri=R6
                 	.DEF _vi_tri_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _len=R11
                 	.DEF _currentLevel=R12
                 	.DEF _currentLevel_msb=R13
                 	.DEF __lcd_x=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 018c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0253 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _font5x7:
000046 0705
000047 6020
000048 0000
000049 0000      	.DB  0x5,0x7,0x20,0x60,0x0,0x0,0x0,0x0
00004a 0000
00004b 5f00
00004c 0000
00004d 0700      	.DB  0x0,0x0,0x0,0x5F,0x0,0x0,0x0,0x7
00004e 0700
00004f 1400
000050 147f
000051 147f      	.DB  0x0,0x7,0x0,0x14,0x7F,0x14,0x7F,0x14
000052 2a24
000053 2a7f
000054 2312
000055 0813      	.DB  0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x8
000056 6264
000057 4936
000058 2255
000059 0050      	.DB  0x64,0x62,0x36,0x49,0x55,0x22,0x50,0x0
00005a 0305
00005b 0000
00005c 1c00
00005d 4122      	.DB  0x5,0x3,0x0,0x0,0x0,0x1C,0x22,0x41
00005e 0000
00005f 2241
000060 001c
000061 2a08      	.DB  0x0,0x0,0x41,0x22,0x1C,0x0,0x8,0x2A
000062 2a1c
000063 0808
000064 3e08
000065 0808      	.DB  0x1C,0x2A,0x8,0x8,0x8,0x3E,0x8,0x8
000066 5000
000067 0030
000068 0800
000069 0808      	.DB  0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x8
00006a 0808
00006b 3000
00006c 0030
00006d 2000      	.DB  0x8,0x8,0x0,0x30,0x30,0x0,0x0,0x20
00006e 0810
00006f 0204
000070 513e
000071 4549      	.DB  0x10,0x8,0x4,0x2,0x3E,0x51,0x49,0x45
000072 003e
000073 7f42
000074 0040
000075 6142      	.DB  0x3E,0x0,0x42,0x7F,0x40,0x0,0x42,0x61
000076 4951
000077 2146
000078 4541
000079 314b      	.DB  0x51,0x49,0x46,0x21,0x41,0x45,0x4B,0x31
00007a 1418
00007b 7f12
00007c 2710
00007d 4545      	.DB  0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45
00007e 3945
00007f 4a3c
000080 4949
000081 0130      	.DB  0x45,0x39,0x3C,0x4A,0x49,0x49,0x30,0x1
000082 0971
000083 0305
000084 4936
000085 4949      	.DB  0x71,0x9,0x5,0x3,0x36,0x49,0x49,0x49
000086 0636
000087 4949
000088 1e29
000089 3600      	.DB  0x36,0x6,0x49,0x49,0x29,0x1E,0x0,0x36
00008a 0036
00008b 0000
00008c 3656
00008d 0000      	.DB  0x36,0x0,0x0,0x0,0x56,0x36,0x0,0x0
00008e 0800
00008f 2214
000090 1441
000091 1414      	.DB  0x0,0x8,0x14,0x22,0x41,0x14,0x14,0x14
000092 1414
000093 2241
000094 0814
000095 0200      	.DB  0x14,0x14,0x41,0x22,0x14,0x8,0x0,0x2
000096 5101
000097 0609
000098 4932
000099 4179      	.DB  0x1,0x51,0x9,0x6,0x32,0x49,0x79,0x41
00009a 7e3e
00009b 1111
00009c 7e11
00009d 497f      	.DB  0x3E,0x7E,0x11,0x11,0x11,0x7E,0x7F,0x49
00009e 4949
00009f 3e36
0000a0 4141
0000a1 2241      	.DB  0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22
0000a2 417f
0000a3 2241
0000a4 7f1c
0000a5 4949      	.DB  0x7F,0x41,0x41,0x22,0x1C,0x7F,0x49,0x49
0000a6 4149
0000a7 097f
0000a8 0109
0000a9 3e01      	.DB  0x49,0x41,0x7F,0x9,0x9,0x1,0x1,0x3E
0000aa 4141
0000ab 3251
0000ac 087f
0000ad 0808      	.DB  0x41,0x41,0x51,0x32,0x7F,0x8,0x8,0x8
0000ae 007f
0000af 7f41
0000b0 0041
0000b1 4020      	.DB  0x7F,0x0,0x41,0x7F,0x41,0x0,0x20,0x40
0000b2 3f41
0000b3 7f01
0000b4 1408
0000b5 4122      	.DB  0x41,0x3F,0x1,0x7F,0x8,0x14,0x22,0x41
0000b6 407f
0000b7 4040
0000b8 7f40
0000b9 0402      	.DB  0x7F,0x40,0x40,0x40,0x40,0x7F,0x2,0x4
0000ba 7f02
0000bb 047f
0000bc 1008
0000bd 3e7f      	.DB  0x2,0x7F,0x7F,0x4,0x8,0x10,0x7F,0x3E
0000be 4141
0000bf 3e41
0000c0 097f
0000c1 0909      	.DB  0x41,0x41,0x41,0x3E,0x7F,0x9,0x9,0x9
0000c2 3e06
0000c3 5141
0000c4 5e21
0000c5 097f      	.DB  0x6,0x3E,0x41,0x51,0x21,0x5E,0x7F,0x9
0000c6 2919
0000c7 4646
0000c8 4949
0000c9 3149      	.DB  0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31
0000ca 0101
0000cb 017f
0000cc 3f01
0000cd 4040      	.DB  0x1,0x1,0x7F,0x1,0x1,0x3F,0x40,0x40
0000ce 3f40
0000cf 201f
0000d0 2040
0000d1 7f1f      	.DB  0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F,0x7F
0000d2 1820
0000d3 7f20
0000d4 1463
0000d5 1408      	.DB  0x20,0x18,0x20,0x7F,0x63,0x14,0x8,0x14
0000d6 0363
0000d7 7804
0000d8 0304
0000d9 5161      	.DB  0x63,0x3,0x4,0x78,0x4,0x3,0x61,0x51
0000da 4549
0000db 0043
0000dc 7f00
0000dd 4141      	.DB  0x49,0x45,0x43,0x0,0x0,0x7F,0x41,0x41
0000de 0402
0000df 1008
0000e0 4120
0000e1 7f41      	.DB  0x2,0x4,0x8,0x10,0x20,0x41,0x41,0x7F
0000e2 0000
0000e3 0204
0000e4 0201
0000e5 4004      	.DB  0x0,0x0,0x4,0x2,0x1,0x2,0x4,0x40
0000e6 4040
0000e7 4040
0000e8 0100
0000e9 0402      	.DB  0x40,0x40,0x40,0x40,0x0,0x1,0x2,0x4
0000ea 2000
0000eb 5454
0000ec 7854
0000ed 487f      	.DB  0x0,0x20,0x54,0x54,0x54,0x78,0x7F,0x48
0000ee 4444
0000ef 3838
0000f0 4444
0000f1 2044      	.DB  0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20
0000f2 4438
0000f3 4844
0000f4 387f
0000f5 5454      	.DB  0x38,0x44,0x44,0x48,0x7F,0x38,0x54,0x54
0000f6 1854
0000f7 7e08
0000f8 0109
0000f9 0802      	.DB  0x54,0x18,0x8,0x7E,0x9,0x1,0x2,0x8
0000fa 5414
0000fb 3c54
0000fc 087f
0000fd 0404      	.DB  0x14,0x54,0x54,0x3C,0x7F,0x8,0x4,0x4
0000fe 0078
0000ff 7d44
000100 0040
000101 4020      	.DB  0x78,0x0,0x44,0x7D,0x40,0x0,0x20,0x40
000102 3d44
000103 0000
000104 107f
000105 4428      	.DB  0x44,0x3D,0x0,0x0,0x7F,0x10,0x28,0x44
000106 4100
000107 407f
000108 7c00
000109 1804      	.DB  0x0,0x41,0x7F,0x40,0x0,0x7C,0x4,0x18
00010a 7804
00010b 087c
00010c 0404
00010d 3878      	.DB  0x4,0x78,0x7C,0x8,0x4,0x4,0x78,0x38
00010e 4444
00010f 3844
000110 147c
000111 1414      	.DB  0x44,0x44,0x44,0x38,0x7C,0x14,0x14,0x14
000112 0808
000113 1414
000114 7c18
000115 087c      	.DB  0x8,0x8,0x14,0x14,0x18,0x7C,0x7C,0x8
000116 0404
000117 4808
000118 5454
000119 2054      	.DB  0x4,0x4,0x8,0x48,0x54,0x54,0x54,0x20
00011a 3f04
00011b 4044
00011c 3c20
00011d 4040      	.DB  0x4,0x3F,0x44,0x40,0x20,0x3C,0x40,0x40
00011e 7c20
00011f 201c
000120 2040
000121 3c1c      	.DB  0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C
000122 3040
000123 3c40
000124 2844
000125 2810      	.DB  0x40,0x30,0x40,0x3C,0x44,0x28,0x10,0x28
000126 0c44
000127 5050
000128 3c50
000129 6444      	.DB  0x44,0xC,0x50,0x50,0x50,0x3C,0x44,0x64
00012a 4c54
00012b 0044
00012c 3608
00012d 0041      	.DB  0x54,0x4C,0x44,0x0,0x8,0x36,0x41,0x0
00012e 0000
00012f 007f
000130 0000
000131 3641      	.DB  0x0,0x0,0x7F,0x0,0x0,0x0,0x41,0x36
000132 0008
000133 0102
000134 0402
000135 7f02      	.DB  0x8,0x0,0x2,0x1,0x2,0x4,0x2,0x7F
000136 4141
000137 7f41      	.DB  0x41,0x41,0x41,0x7F
                 __glcd_mask:
000138 0100
000139 0703
00013a 1f0f
00013b 7f3f      	.DB  0x0,0x1,0x3,0x7,0xF,0x1F,0x3F,0x7F
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1208): warning: .cseg .db misalignment - padding zero byte
00013c 00ff      	.DB  0xFF
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00013d 0000
00013e 000a      	.DB  0x0,0x0,0xA,0x0
00013f 0000
000140 0100      	.DB  0x0,0x0,0x0,0x1
000141 0000      	.DB  0x0,0x0
                 
                 _0x3:
000142 0000
000143 0001
000144 0002
000145 0003      	.DB  0x0,0x0,0x1,0x0,0x2,0x0,0x3,0x0
000146 0004
000147 0005
000148 0006
000149 0007      	.DB  0x4,0x0,0x5,0x0,0x6,0x0,0x7,0x0
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1219): warning: .cseg .db misalignment - padding zero byte
00014a 0008      	.DB  0x8
                 _0x0:
00014b 6144
00014c 676e
00014d 6420
00014e 2069      	.DB  0x44,0x61,0x6E,0x67,0x20,0x64,0x69,0x20
00014f 6863
000150 7975
000151 6e65
000152 4400      	.DB  0x63,0x68,0x75,0x79,0x65,0x6E,0x0,0x44
000153 6e61
000154 2067
000155 6964
000156 6320      	.DB  0x61,0x6E,0x67,0x20,0x64,0x69,0x20,0x63
000157 7568
000158 6579
000159 206e
00015a 2e2e      	.DB  0x68,0x75,0x79,0x65,0x6E,0x20,0x2E,0x2E
00015b 002e
00015c 6544
00015d 206e
00015e 6174      	.DB  0x2E,0x0,0x44,0x65,0x6E,0x20,0x74,0x61
00015f 676e
000160 4400
000161 6e65
000162 7420      	.DB  0x6E,0x67,0x0,0x44,0x65,0x6E,0x20,0x74
000163 6e61
000164 3a67
000165 0020      	.DB  0x61,0x6E,0x67,0x3A,0x20,0x0
                 _0x2060003:
000166 c080      	.DB  0x80,0xC0
                 _0x2080060:
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1231): warning: .cseg .db misalignment - padding zero byte
000167 0001      	.DB  0x1
                 _0x2080000:
000168 4e2d
000169 4e41
00016a 4900
00016b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Private\CODE\Classsroom\Embedded\Final2\Final\thang_may_tested_7\Debug\List\elevator.asm(1234): warning: .cseg .db misalignment - padding zero byte
00016c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00016d 000a      	.DW  0x0A
00016e 0004      	.DW  0x04
00016f 027a      	.DW  __REG_VARS*2
                 
000170 0011      	.DW  0x11
000171 0567      	.DW  _keypad
000172 0284      	.DW  _0x3*2
                 
000173 000f      	.DW  0x0F
000174 0500      	.DW  _0x42
000175 0296      	.DW  _0x0*2
                 
000176 0013      	.DW  0x13
000177 050f      	.DW  _0x42+15
000178 02a5      	.DW  _0x0*2+15
                 
000179 0009      	.DW  0x09
00017a 0522      	.DW  _0x42+34
00017b 02b8      	.DW  _0x0*2+34
                 
00017c 000b      	.DW  0x0B
00017d 052b      	.DW  _0x42+43
00017e 02c1      	.DW  _0x0*2+43
                 
00017f 0009      	.DW  0x09
000180 0536      	.DW  _0x42+54
000181 02b8      	.DW  _0x0*2+34
                 
000182 000b      	.DW  0x0B
000183 053f      	.DW  _0x42+63
000184 02c1      	.DW  _0x0*2+43
                 
000185 0002      	.DW  0x02
000186 078c      	.DW  __base_y_G103
000187 02cc      	.DW  _0x2060003*2
                 
000188 0001      	.DW  0x01
000189 0792      	.DW  __seed_G104
00018a 02ce      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
00018b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00018c 94f8      	CLI
00018d 27ee      	CLR  R30
00018e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00018f e0f1      	LDI  R31,1
000190 bff5      	OUT  MCUCR,R31
000191 bfe5      	OUT  MCUCR,R30
000192 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000194 e08d      	LDI  R24,(14-2)+1
000195 e0a2      	LDI  R26,2
000196 27bb      	CLR  R27
                 __CLEAR_REG:
000197 93ed      	ST   X+,R30
000198 958a      	DEC  R24
000199 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00019a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00019b e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00019c e0a0      	LDI  R26,LOW(__SRAM_START)
00019d e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00019e 93ed      	ST   X+,R30
00019f 9701      	SBIW R24,1
0001a0 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001a1 edea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001a2 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001a3 9185      	LPM  R24,Z+
0001a4 9195      	LPM  R25,Z+
0001a5 9700      	SBIW R24,0
0001a6 f061      	BREQ __GLOBAL_INI_END
0001a7 91a5      	LPM  R26,Z+
0001a8 91b5      	LPM  R27,Z+
0001a9 9005      	LPM  R0,Z+
0001aa 9015      	LPM  R1,Z+
0001ab 01bf      	MOVW R22,R30
0001ac 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001ad 9005      	LPM  R0,Z+
0001ae 920d      	ST   X+,R0
0001af 9701      	SBIW R24,1
0001b0 f7e1      	BRNE __GLOBAL_INI_LOOP
0001b1 01fb      	MOVW R30,R22
0001b2 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0001b3 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001b4 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001b5 bfed      	OUT  SPL,R30
0001b6 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001b7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001b8 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001b9 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001ba 940c 0332 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * elevator.c
                 ; *
                 ; * Created: 12/29/2022 10:30:54 PM
                 ; * Author: Who
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <hardware.c>
                 ;#include <delay.h>
                 ;#include <glcd.h>
                 ;#include <font5x7.h>
                 ;#include <alcd.h>
                 ;
                 ;int keypad[3][3] = {0,1,2,3,4,5,6,7,8};
                 
                 	.DSEG
                 ;
                 ;void init_register() {
                 ; 0000 0009 void init_register() {
                 
                 	.CSEG
                 _init_register:
                 ; .FSTART _init_register
                 ;    // ban phim ma tran
                 ;    DDRF = 0b11101010;
0001bc eeea      	LDI  R30,LOW(234)
0001bd 93e0 0061 	STS  97,R30
                 ;    // DC
                 ;    DDRB.4 = 1;
0001bf 9abc      	SBI  0x17,4
                 ;    // servo
                 ;    DDRC.7 = 1;
0001c0 9aa7      	SBI  0x14,7
                 ;    //for servo inverse (nhung ko xuat xung PWM, can than cai USB drive)
                 ;    DDRB.5 = 1;
0001c1 9abd      	SBI  0x17,5
                 ;    ADCSRA=0x83;
0001c2 e8e3      	LDI  R30,LOW(131)
0001c3 b9e6      	OUT  0x6,R30
                 ;}
0001c4 9508      	RET
                 ; .FEND
                 ;
                 ;// NOTE: DUNG CO CHE TAY VAO CAI LDR OR YOU WILL NEVER SEE IT COMING
                 ;int read() {
                 _read:
                 ; .FSTART _read
                 ;    char a, i, j;
                 ;    for(j = 0; j < 3; j++ ){
0001c5 940e 0a46 	CALL __SAVELOCR4
                 ;	a -> R17
                 ;	i -> R16
                 ;	j -> R19
0001c7 e030      	LDI  R19,LOW(0)
                 _0xB:
0001c8 3033      	CPI  R19,3
0001c9 f5a0      	BRSH _0xC
                 ;        if (j == 0) PORTF = 0b11111101;
0001ca 3030      	CPI  R19,0
0001cb f419      	BRNE _0xD
0001cc efed      	LDI  R30,LOW(253)
0001cd 93e0 0062 	STS  98,R30
                 ;        if (j == 1) PORTF = 0b11110111;
                 _0xD:
0001cf 3031      	CPI  R19,1
0001d0 f419      	BRNE _0xE
0001d1 efe7      	LDI  R30,LOW(247)
0001d2 93e0 0062 	STS  98,R30
                 ;        if (j == 2) PORTF = 0b11011111;
                 _0xE:
0001d4 3032      	CPI  R19,2
0001d5 f419      	BRNE _0xF
0001d6 edef      	LDI  R30,LOW(223)
0001d7 93e0 0062 	STS  98,R30
                 ;        for(i = 0; i < 3; i++){
                 _0xF:
0001d9 e000      	LDI  R16,LOW(0)
                 _0x11:
0001da 3003      	CPI  R16,3
0001db f500      	BRSH _0x12
                 ;            if (i == 0){
0001dc 3000      	CPI  R16,0
0001dd f441      	BRNE _0x13
                 ;                a = PINF&0x04;
0001de b1e0      	IN   R30,0x0
0001df 70e4      	ANDI R30,LOW(0x4)
0001e0 2f1e      	MOV  R17,R30
                 ;                if(a != 0x04) {
0001e1 3014      	CPI  R17,4
0001e2 f019      	BREQ _0x14
                 ;                    return keypad[i][j];
0001e3 940e 0926 	CALL SUBOPT_0x0
0001e5 c01a      	RJMP _0x212000B
                 ;                }
                 ;            }
                 _0x14:
                 ;            if (i == 1){
                 _0x13:
0001e6 3001      	CPI  R16,1
0001e7 f441      	BRNE _0x15
                 ;                a = PINF&0x10;
0001e8 b1e0      	IN   R30,0x0
0001e9 71e0      	ANDI R30,LOW(0x10)
0001ea 2f1e      	MOV  R17,R30
                 ;                if (a != 0x10) {
0001eb 3110      	CPI  R17,16
0001ec f019      	BREQ _0x16
                 ;                    return keypad[i][j];
0001ed 940e 0926 	CALL SUBOPT_0x0
0001ef c010      	RJMP _0x212000B
                 ;                }
                 ;            }
                 _0x16:
                 ;            if (i == 2){
                 _0x15:
0001f0 3002      	CPI  R16,2
0001f1 f441      	BRNE _0x17
                 ;                a = PINF&0x01;
0001f2 b1e0      	IN   R30,0x0
0001f3 70e1      	ANDI R30,LOW(0x1)
0001f4 2f1e      	MOV  R17,R30
                 ;                if (a != 0x01) {
0001f5 3011      	CPI  R17,1
0001f6 f019      	BREQ _0x18
                 ;                    return keypad[i][j];
0001f7 940e 0926 	CALL SUBOPT_0x0
0001f9 c006      	RJMP _0x212000B
                 ;                }
                 ;            }
                 _0x18:
                 ;        }
                 _0x17:
0001fa 5f0f      	SUBI R16,-1
0001fb cfde      	RJMP _0x11
                 _0x12:
                 ;    }
0001fc 5f3f      	SUBI R19,-1
0001fd cfca      	RJMP _0xB
                 _0xC:
                 ;    return -1;
0001fe efef      	LDI  R30,LOW(65535)
0001ff efff      	LDI  R31,HIGH(65535)
                 _0x212000B:
000200 940e 0a4d 	CALL __LOADLOCR4
000202 9624      	ADIW R28,4
000203 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;void init_glcd(int bias, int vlcd) {
                 _init_glcd:
                 ; .FSTART _init_glcd
                 ;    GLCDINIT_t glcd_init_data;
                 ;    glcd_init_data.font=font5x7;
000204 93ba      	ST   -Y,R27
000205 93aa      	ST   -Y,R26
000206 9728      	SBIW R28,8
                 ;	bias -> Y+10
                 ;	vlcd -> Y+8
                 ;	glcd_init_data -> Y+0
000207 e8ec      	LDI  R30,LOW(_font5x7*2)
000208 e0f0      	LDI  R31,HIGH(_font5x7*2)
000209 83e8      	ST   Y,R30
00020a 83f9      	STD  Y+1,R31
                 ;    glcd_init_data.temp_coef=140;
00020b 81ee      	LDD  R30,Y+6
00020c 7fec      	ANDI R30,LOW(0xFC)
00020d 83ee      	STD  Y+6,R30
                 ;    glcd_init_data.bias=bias;
00020e 85ea      	LDD  R30,Y+10
00020f 70e7      	ANDI R30,LOW(0x7)
000210 0fee      	LSL  R30
000211 0fee      	LSL  R30
000212 2e0e      	MOV  R0,R30
000213 81ee      	LDD  R30,Y+6
000214 7ee3      	ANDI R30,LOW(0xE3)
000215 29e0      	OR   R30,R0
000216 83ee      	STD  Y+6,R30
                 ;    glcd_init_data.vlcd=vlcd;
000217 85e8      	LDD  R30,Y+8
000218 77ef      	ANDI R30,0x7F
000219 2e0e      	MOV  R0,R30
00021a 81ef      	LDD  R30,Y+7
00021b 78e0      	ANDI R30,LOW(0x80)
00021c 29e0      	OR   R30,R0
00021d 83ef      	STD  Y+7,R30
                 ;    glcd_init(&glcd_init_data);
00021e 01de      	MOVW R26,R28
00021f d1ab      	RCALL _glcd_init
                 ;}
000220 940c 073f 	JMP  _0x2120008
                 ; .FEND
                 ;
                 ;
                 ;void init_lcd() {
                 _init_lcd:
                 ; .FSTART _init_lcd
                 ;    lcd_init(16);
000222 e1a0      	LDI  R26,LOW(16)
000223 940e 0847 	CALL _lcd_init
                 ;    lcd_clear();
000225 940e 0814 	CALL _lcd_clear
                 ;}
000227 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void adjustSpeed(int speed) {
                 _adjustSpeed:
                 ; .FSTART _adjustSpeed
                 ;    OCR0 = 255 - speed;
000228 93ba      	ST   -Y,R27
000229 93aa      	ST   -Y,R26
                 ;	speed -> Y+0
00022a 81a8      	LD   R26,Y
00022b efef      	LDI  R30,LOW(255)
00022c 1bea      	SUB  R30,R26
00022d bfe1      	OUT  0x31,R30
                 ;}
00022e 9622      	ADIW R28,2
00022f 9508      	RET
                 ; .FEND
                 ;
                 ;void quay_nguoc_DC() {
                 _quay_nguoc_DC:
                 ; .FSTART _quay_nguoc_DC
                 ;    PORTB.5 = 1;
000230 9ac5      	SBI  0x18,5
                 ;}
000231 9508      	RET
                 ; .FEND
                 ;
                 ;void quay_DC() {
                 _quay_DC:
                 ; .FSTART _quay_DC
                 ;    adjustSpeed(120);
000232 e7a8      	LDI  R26,LOW(120)
000233 e0b0      	LDI  R27,0
000234 dff3      	RCALL _adjustSpeed
                 ;}
000235 9508      	RET
                 ; .FEND
                 ;
                 ;void dung_DC() {
                 _dung_DC:
                 ; .FSTART _dung_DC
                 ;    adjustSpeed(0);
000236 e0a0      	LDI  R26,LOW(0)
000237 e0b0      	LDI  R27,0
000238 dfef      	RCALL _adjustSpeed
                 ;    PORTB.5 = 0;
000239 98c5      	CBI  0x18,5
                 ;}
00023a 9508      	RET
                 ; .FEND
                 ;
                 ;void init_timer() {
                 _init_timer:
                 ; .FSTART _init_timer
                 ;    // khoi tao timer 0 cho dong co
                 ;    ASSR=0<<AS0;
00023b e0e0      	LDI  R30,LOW(0)
00023c bfe0      	OUT  0x30,R30
                 ;    TCCR0=(1<<WGM00) | (1<<COM01) | (1<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
00023d e7e4      	LDI  R30,LOW(116)
00023e bfe3      	OUT  0x33,R30
                 ;    TCNT0=0x00;
00023f e0e0      	LDI  R30,LOW(0)
000240 bfe2      	OUT  0x32,R30
                 ;    adjustSpeed(0);
000241 e0a0      	LDI  R26,LOW(0)
000242 e0b0      	LDI  R27,0
000243 dfe4      	RCALL _adjustSpeed
                 ;
                 ;    // Timer 1 (0.1 ms) cho den va servo
                 ;    TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<COM1C1) | (0<<COM1C0) | (0<<WGM11) | (0<<WGM10);
000244 e0e0      	LDI  R30,LOW(0)
000245 bdef      	OUT  0x2F,R30
                 ;    TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000246 e0e1      	LDI  R30,LOW(1)
000247 bdee      	OUT  0x2E,R30
                 ;    TCNT1H=0xFC;
000248 efec      	LDI  R30,LOW(252)
000249 bded      	OUT  0x2D,R30
                 ;    TCNT1L=0xE0;
00024a eee0      	LDI  R30,LOW(224)
00024b bdec      	OUT  0x2C,R30
                 ;    TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00024c e0e4      	LDI  R30,LOW(4)
00024d bfe7      	OUT  0x37,R30
                 ;    ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
00024e e0e0      	LDI  R30,LOW(0)
00024f 93e0 007d 	STS  125,R30
                 ;    #asm("sei")
000251 9478      	sei
                 ;}
000252 9508      	RET
                 ; .FEND
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <glcd.h>
                 ;#include <alcd.h>
                 ;#define servo_1 PORTC.7
                 ;
                 ;int dem = 0, vi_tri = 10;
                 ;char what[16];
                 ;int i;
                 ;// dieu khien cac tang trong thang may
                 ;bool order[9] = {false, false, false, false, false, false, false, false, false};
                 ;
                 ;
                 ;// dieu khien trang thai len / xuong
                 ;bool len = true;
                 ;int currentLevel = 0;
                 ;
                 ;// Timer1 overflow interrupt service routine (delay 0.1 ms)
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 001D {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000253 920a      	ST   -Y,R0
000254 921a      	ST   -Y,R1
000255 92fa      	ST   -Y,R15
000256 936a      	ST   -Y,R22
000257 937a      	ST   -Y,R23
000258 938a      	ST   -Y,R24
000259 939a      	ST   -Y,R25
00025a 93aa      	ST   -Y,R26
00025b 93ba      	ST   -Y,R27
00025c 93ea      	ST   -Y,R30
00025d 93fa      	ST   -Y,R31
00025e b7ef      	IN   R30,SREG
00025f 93ea      	ST   -Y,R30
                 ; 0000 001E     int input;
                 ; 0000 001F     // Reinitialize Timer1 value
                 ; 0000 0020     TCNT1H=0xFCE0 >> 8;
000260 931a      	ST   -Y,R17
000261 930a      	ST   -Y,R16
                 ;	input -> R16,R17
000262 efec      	LDI  R30,LOW(252)
000263 bded      	OUT  0x2D,R30
                 ; 0000 0021     TCNT1L=0xFCE0 & 0xff;
000264 eee0      	LDI  R30,LOW(224)
000265 bdec      	OUT  0x2C,R30
                 ; 0000 0022 
                 ; 0000 0023     // servo
                 ; 0000 0024     dem++;
000266 01f2      	MOVW R30,R4
000267 9631      	ADIW R30,1
000268 012f      	MOVW R4,R30
                 ; 0000 0025     if(dem >= 200)
000269 ece8      	LDI  R30,LOW(200)
00026a e0f0      	LDI  R31,HIGH(200)
00026b 164e      	CP   R4,R30
00026c 065f      	CPC  R5,R31
00026d f014      	BRLT _0x1D
                 ; 0000 0026         dem = 0;
00026e 2444      	CLR  R4
00026f 2455      	CLR  R5
                 ; 0000 0027     if (dem < vi_tri)
                 _0x1D:
                +
000270 1446     +CP R4 , R6
000271 0457     +CPC R5 , R7
                 	__CPWRR 4,5,6,7
000272 f414      	BRGE _0x1E
                 ; 0000 0028         servo_1 = 1;
000273 9aaf      	SBI  0x15,7
                 ; 0000 0029     else
000274 c001      	RJMP _0x21
                 _0x1E:
                 ; 0000 002A         servo_1 = 0;
000275 98af      	CBI  0x15,7
                 ; 0000 002B 
                 ; 0000 002C     // ~ delay 199 ms ban phim ma tran
                 ; 0000 002D     if (dem == 199) {
                 _0x21:
000276 ece7      	LDI  R30,LOW(199)
000277 e0f0      	LDI  R31,HIGH(199)
000278 15e4      	CP   R30,R4
000279 05f5      	CPC  R31,R5
00027a f469      	BRNE _0x24
                 ; 0000 002E         input = read();
00027b df49      	RCALL _read
00027c 018f      	MOVW R16,R30
                 ; 0000 002F         if (input != -1)
00027d efef      	LDI  R30,LOW(65535)
00027e efff      	LDI  R31,HIGH(65535)
00027f 17e0      	CP   R30,R16
000280 07f1      	CPC  R31,R17
000281 f031      	BREQ _0x25
                 ; 0000 0030             order[input] = true;
000282 e8a9      	LDI  R26,LOW(_order)
000283 e0b5      	LDI  R27,HIGH(_order)
000284 0fa0      	ADD  R26,R16
000285 1fb1      	ADC  R27,R17
000286 e0e1      	LDI  R30,LOW(1)
000287 93ec      	ST   X,R30
                 ; 0000 0031     }
                 _0x25:
                 ; 0000 0032 }
                 _0x24:
000288 9109      	LD   R16,Y+
000289 9119      	LD   R17,Y+
00028a 91e9      	LD   R30,Y+
00028b bfef      	OUT  SREG,R30
00028c 91f9      	LD   R31,Y+
00028d 91e9      	LD   R30,Y+
00028e 91b9      	LD   R27,Y+
00028f 91a9      	LD   R26,Y+
000290 9199      	LD   R25,Y+
000291 9189      	LD   R24,Y+
000292 9179      	LD   R23,Y+
000293 9169      	LD   R22,Y+
000294 90f9      	LD   R15,Y+
000295 9019      	LD   R1,Y+
000296 9009      	LD   R0,Y+
000297 9518      	RETI
                 ; .FEND
                 ;// led 7 doan
                 ;// void khoi_tao_led_7_doan(){
                 ;//     DDRF = 0xFF;
                 ;//     DDRD = 0xFF;
                 ;//     DDRA.7 = 1;
                 ;
                 ;// }
                 ;// void hienThiLed7Doan(int i, unsigned int j){
                 ;//     if(i==0){
                 ;//         PORTF = 0x80 + j;
                 ;//     PORTD = 0xF9;
                 ;//     PORTA = 0x7F;
                 ;//     }
                 ;//     if(i==1){
                 ;//     PORTF = 0x86 + j;
                 ;//     PORTD = 0xFF;
                 ;//     PORTA = 0x7F;
                 ;//     }
                 ;//     if(i==2){
                 ;//     PORTF = 0x84 + j;
                 ;//     PORTD = 0xF1;
                 ;
                 ;//     PORTA = 0xFF;
                 ;//     }
                 ;//     if(i==3){
                 ;//     PORTF = 0x84 + j;
                 ;//     PORTD = 0xF5;
                 ;//     PORTE = 0x00;
                 ;//     PORTA = 0x7F;
                 ;//     }
                 ;//     if(i==4){
                 ;//     PORTF = 0x82 + j;
                 ;//     PORTD = 0xF7;
                 ;//     PORTA = 0x7F;
                 ;//     }
                 ;//     if(i==5){
                 ;//     PORTF = 0xA0 + j;
                 ;//     PORTD = 0xF5;
                 ;//     PORTA = 0x7F;
                 ;//     }if(i==6){
                 ;//     PORTF = 0xA0 + j;
                 ;//     PORTD = 0xF1;
                 ;//     PORTA = 0x7F;
                 ;//     }
                 ;//     if(i==7){
                 ;//     PORTF = 0x84 + j;
                 ;//     PORTD = 0xFF;
                 ;//     PORTA = 0x7F;
                 ;//     }
                 ;
                 ;//     if(i==8){
                 ;//     PORTF = 0x80 + j;
                 ;//     PORTD = 0xF1;
                 ;//     PORTA = 0x7F;
                 ;//     }
                 ;//     if(i==9){
                 ;//     PORTF = 0x80 + j;
                 ;//     PORTD = 0xF5;
                 ;//     PORTA = 0x7F;
                 ;//     }if(i==10){
                 ;//     PORTF = 0x26 + j;
                 ;//     PORTD = 0xFF;
                 ;//     PORTA = 0xFF;
                 ;//     }
                 ;
                 ;//     delay_ms(1);
                 ;// }
                 ;
                 ;void thang_may() {
                 ; 0000 0077 void thang_may() {
                 _thang_may:
                 ; .FSTART _thang_may
                 ; 0000 0078     // neu ko co tang nao dc bam thi thoi ko lam gi ca
                 ; 0000 0079     for (i = 0; i <= 8; i++){
000298 2488      	CLR  R8
000299 2499      	CLR  R9
                 _0x27:
00029a 940e 0935 	CALL SUBOPT_0x1
00029c f064      	BRLT _0x28
                 ; 0000 007A         if (order[i] == true){
00029d 940e 093a 	CALL SUBOPT_0x2
00029f 30a1      	CPI  R26,LOW(0x1)
0002a0 f041      	BREQ _0x28
                 ; 0000 007B             break;
                 ; 0000 007C         }
                 ; 0000 007D         if (i == 8){
0002a1 940e 0935 	CALL SUBOPT_0x1
0002a3 f409      	BRNE _0x2A
                 ; 0000 007E             return;
0002a4 9508      	RET
                 ; 0000 007F         }
                 ; 0000 0080     }
                 _0x2A:
0002a5 01f4      	MOVW R30,R8
0002a6 9631      	ADIW R30,1
0002a7 014f      	MOVW R8,R30
0002a8 cff1      	RJMP _0x27
                 _0x28:
                 ; 0000 0081     // thiet lap trang thai len/xuong
                 ; 0000 0082     if (len) {
0002a9 20bb      	TST  R11
0002aa f0b1      	BREQ _0x2B
                 ; 0000 0083         for (i = currentLevel; i <= 8; i++) {
0002ab 0146      	MOVW R8,R12
                 _0x2D:
0002ac 940e 0935 	CALL SUBOPT_0x1
0002ae f094      	BRLT _0x2E
                 ; 0000 0084             // neu len tang 8 roi ma ko co yeu cau thi chuyen che do cho di xuong
                 ; 0000 0085             if (i == 8 && order[i] == false) {
0002af 940e 0935 	CALL SUBOPT_0x1
0002b1 f421      	BRNE _0x30
0002b2 940e 093a 	CALL SUBOPT_0x2
0002b4 30a0      	CPI  R26,LOW(0x0)
0002b5 f009      	BREQ _0x31
                 _0x30:
0002b6 c002      	RJMP _0x2F
                 _0x31:
                 ; 0000 0086                 len = false;
0002b7 24bb      	CLR  R11
                 ; 0000 0087             }
                 ; 0000 0088             else if (order[i] == true) {
0002b8 c004      	RJMP _0x32
                 _0x2F:
0002b9 940e 093a 	CALL SUBOPT_0x2
0002bb 30a1      	CPI  R26,LOW(0x1)
0002bc f021      	BREQ _0x2E
                 ; 0000 0089                 break;
                 ; 0000 008A             }
                 ; 0000 008B         }
                 _0x32:
0002bd 01f4      	MOVW R30,R8
0002be 9631      	ADIW R30,1
0002bf 014f      	MOVW R8,R30
0002c0 cfeb      	RJMP _0x2D
                 _0x2E:
                 ; 0000 008C     }
                 ; 0000 008D     if (!len) {
                 _0x2B:
0002c1 20bb      	TST  R11
0002c2 f4c9      	BRNE _0x34
                 ; 0000 008E         for (i = currentLevel; i >= 0; i--) {
0002c3 0146      	MOVW R8,R12
                 _0x36:
0002c4 2400      	CLR  R0
0002c5 1480      	CP   R8,R0
0002c6 0490      	CPC  R9,R0
0002c7 f0a4      	BRLT _0x37
                 ; 0000 008F             // tuong tu voi doan di len. neu da o tang 0
                 ; 0000 0090             if (i == 0 && order[i] == false) {
0002c8 2400      	CLR  R0
0002c9 1408      	CP   R0,R8
0002ca 0409      	CPC  R0,R9
0002cb f421      	BRNE _0x39
0002cc 940e 093a 	CALL SUBOPT_0x2
0002ce 30a0      	CPI  R26,LOW(0x0)
0002cf f009      	BREQ _0x3A
                 _0x39:
0002d0 c003      	RJMP _0x38
                 _0x3A:
                 ; 0000 0091                 len = true;
0002d1 e0e1      	LDI  R30,LOW(1)
0002d2 2ebe      	MOV  R11,R30
                 ; 0000 0092                 return;
0002d3 9508      	RET
                 ; 0000 0093             }
                 ; 0000 0094             else if (order[i] == true) {
                 _0x38:
0002d4 940e 093a 	CALL SUBOPT_0x2
0002d6 30a1      	CPI  R26,LOW(0x1)
0002d7 f021      	BREQ _0x37
                 ; 0000 0095                 break;
                 ; 0000 0096             }
                 ; 0000 0097         }
0002d8 01f4      	MOVW R30,R8
0002d9 9731      	SBIW R30,1
0002da 014f      	MOVW R8,R30
0002db cfe8      	RJMP _0x36
                 _0x37:
                 ; 0000 0098     }
                 ; 0000 0099 
                 ; 0000 009A     // trong truong hop co tang dc bam, mo servo 1 goc 90 do trong 2s
                 ; 0000 009B     vi_tri = 15;
                 _0x34:
0002dc 940e 0940 	CALL SUBOPT_0x3
                 ; 0000 009C     delay_ms(2000);
                 ; 0000 009D     vi_tri = 10;
                 ; 0000 009E 
                 ; 0000 009F     if (len)
0002de 20bb      	TST  R11
0002df f011      	BREQ _0x3D
                 ; 0000 00A0         quay_DC();
0002e0 df51      	RCALL _quay_DC
                 ; 0000 00A1     else
0002e1 c001      	RJMP _0x3E
                 _0x3D:
                 ; 0000 00A2         quay_nguoc_DC();
0002e2 df4d      	RCALL _quay_nguoc_DC
                 ; 0000 00A3 
                 ; 0000 00A4     while (order[currentLevel] == false) {
                 _0x3E:
                 _0x3F:
0002e3 e8a9      	LDI  R26,LOW(_order)
0002e4 e0b5      	LDI  R27,HIGH(_order)
0002e5 0dac      	ADD  R26,R12
0002e6 1dbd      	ADC  R27,R13
0002e7 91ec      	LD   R30,X
0002e8 30e0      	CPI  R30,0
0002e9 f571      	BRNE _0x41
                 ; 0000 00A5         glcd_clear();
0002ea d187      	RCALL _glcd_clear
                 ; 0000 00A6         glcd_outtextxy(5, 10, "Dang di chuyen");
0002eb e0e5      	LDI  R30,LOW(5)
0002ec 93ea      	ST   -Y,R30
0002ed e0ea      	LDI  R30,LOW(10)
0002ee 93ea      	ST   -Y,R30
                +
0002ef e0a0     +LDI R26 , LOW ( _0x42 + ( 0 ) )
0002f0 e0b5     +LDI R27 , HIGH ( _0x42 + ( 0 ) )
                 	__POINTW2MN _0x42,0
0002f1 940e 094b 	CALL SUBOPT_0x4
                 ; 0000 00A7 
                 ; 0000 00A8         lcd_clear();
                 ; 0000 00A9         lcd_gotoxy(0, 0);
0002f3 e0a0      	LDI  R26,LOW(0)
0002f4 940e 0805 	CALL _lcd_gotoxy
                 ; 0000 00AA         lcd_puts("Dang di chuyen ...");
                +
0002f6 e0af     +LDI R26 , LOW ( _0x42 + ( 15 ) )
0002f7 e0b5     +LDI R27 , HIGH ( _0x42 + ( 15 ) )
                 	__POINTW2MN _0x42,15
0002f8 940e 083b 	CALL _lcd_puts
                 ; 0000 00AB         if (len){
0002fa 20bb      	TST  R11
0002fb f019      	BREQ _0x43
                 ; 0000 00AC             currentLevel++;
0002fc 01f6      	MOVW R30,R12
0002fd 9631      	ADIW R30,1
0002fe c002      	RJMP _0x49
                 ; 0000 00AD             // for(i = currentLevel; i<=8; i++){
                 ; 0000 00AE             //     if(order[i]){
                 ; 0000 00AF             //         lcd_putchar(i+'0');
                 ; 0000 00B0             //     }
                 ; 0000 00B1             // }
                 ; 0000 00B2             // for(i = currentLevel-1; i>=0; i--){
                 ; 0000 00B3             //     if(order[i]){
                 ; 0000 00B4             //         lcd_putchar(i+'0');
                 ; 0000 00B5             //     }
                 ; 0000 00B6             // }
                 ; 0000 00B7 
                 ; 0000 00B8         } else {
                 _0x43:
                 ; 0000 00B9             currentLevel--;
0002ff 01f6      	MOVW R30,R12
000300 9731      	SBIW R30,1
                 _0x49:
000301 016f      	MOVW R12,R30
                 ; 0000 00BA             // for(i = currentLevel; i>=0; i--){
                 ; 0000 00BB             //     if(order[i]){
                 ; 0000 00BC             //         lcd_putchar(i+'0');
                 ; 0000 00BD             //     }
                 ; 0000 00BE             // }
                 ; 0000 00BF             // for(i = currentLevel+1; i<=8; i++){
                 ; 0000 00C0             //     if(order[i]){
                 ; 0000 00C1             //         lcd_putchar(i+'0');
                 ; 0000 00C2             //     }
                 ; 0000 00C3             // }
                 ; 0000 00C4         }
                 ; 0000 00C5         // glcd_clear();
                 ; 0000 00C6         itoa(currentLevel, what);
000302 940e 0952 	CALL SUBOPT_0x5
                 ; 0000 00C7         glcd_outtextxy(5, 25, "Den tang");
                +
000304 e2a2     +LDI R26 , LOW ( _0x42 + ( 34 ) )
000305 e0b5     +LDI R27 , HIGH ( _0x42 + ( 34 ) )
                 	__POINTW2MN _0x42,34
000306 940e 095d 	CALL SUBOPT_0x6
                 ; 0000 00C8         glcd_outtextxy(55, 25, what);
000308 940e 07b7 	CALL _glcd_outtextxy
                 ; 0000 00C9 
                 ; 0000 00CA 
                 ; 0000 00CB         lcd_gotoxy(0, 1);
00030a e0e0      	LDI  R30,LOW(0)
00030b 93ea      	ST   -Y,R30
00030c e0a1      	LDI  R26,LOW(1)
00030d 940e 0805 	CALL _lcd_gotoxy
                 ; 0000 00CC         lcd_puts("Den tang: ");
                +
00030f e2ab     +LDI R26 , LOW ( _0x42 + ( 43 ) )
000310 e0b5     +LDI R27 , HIGH ( _0x42 + ( 43 ) )
                 	__POINTW2MN _0x42,43
000311 940e 0966 	CALL SUBOPT_0x7
                 ; 0000 00CD         lcd_putchar(currentLevel+'0');
                 ; 0000 00CE         //hienThiLed7Doan(currentLevel, 0b00000001);
                 ; 0000 00CF         delay_ms(1000);
000313 eea8      	LDI  R26,LOW(1000)
000314 e0b3      	LDI  R27,HIGH(1000)
000315 940e 09fd 	CALL _delay_ms
                 ; 0000 00D0     }
000317 cfcb      	RJMP _0x3F
                 _0x41:
                 ; 0000 00D1     glcd_clear();
000318 d159      	RCALL _glcd_clear
                 ; 0000 00D2     itoa(currentLevel, what);
000319 940e 0952 	CALL SUBOPT_0x5
                 ; 0000 00D3     glcd_outtextxy(5, 25, "Den tang");
                +
00031b e3a6     +LDI R26 , LOW ( _0x42 + ( 54 ) )
00031c e0b5     +LDI R27 , HIGH ( _0x42 + ( 54 ) )
                 	__POINTW2MN _0x42,54
00031d 940e 095d 	CALL SUBOPT_0x6
                 ; 0000 00D4     glcd_outtextxy(55, 25, what);
00031f 940e 094b 	CALL SUBOPT_0x4
                 ; 0000 00D5 
                 ; 0000 00D6     lcd_clear();
                 ; 0000 00D7     lcd_gotoxy(0, 1);
000321 e0a1      	LDI  R26,LOW(1)
000322 940e 0805 	CALL _lcd_gotoxy
                 ; 0000 00D8     lcd_puts("Den tang: ");
                +
000324 e3af     +LDI R26 , LOW ( _0x42 + ( 63 ) )
000325 e0b5     +LDI R27 , HIGH ( _0x42 + ( 63 ) )
                 	__POINTW2MN _0x42,63
000326 940e 0966 	CALL SUBOPT_0x7
                 ; 0000 00D9     lcd_putchar(currentLevel+'0');
                 ; 0000 00DA     // lcd_gotoxy(0, 0);
                 ; 0000 00DB     // lcd_puts("Current: ");
                 ; 0000 00DC     // lcd_putchar(currentLevel+'0');
                 ; 0000 00DD     // lcd_gotoxy(0, 1);
                 ; 0000 00DE     // lcd_puts("Next: ");
                 ; 0000 00DF     // if (len){
                 ; 0000 00E0     //     for(i = currentLevel+1; i<=8; i++){
                 ; 0000 00E1     //             if(order[i]){
                 ; 0000 00E2     //                 lcd_putchar(i+'0');
                 ; 0000 00E3     //             }
                 ; 0000 00E4     //         }
                 ; 0000 00E5     //     for(i = currentLevel-1; i>=0; i--){
                 ; 0000 00E6     //         if(order[i]){
                 ; 0000 00E7     //             lcd_putchar(i+'0');
                 ; 0000 00E8     //         }
                 ; 0000 00E9     //     }
                 ; 0000 00EA 
                 ; 0000 00EB     // } else {
                 ; 0000 00EC     //     for(i = currentLevel-1; i>=0; i--){
                 ; 0000 00ED     //             if(order[i]){
                 ; 0000 00EE     //                 lcd_putchar(i+'0');
                 ; 0000 00EF     //             }
                 ; 0000 00F0     //         }
                 ; 0000 00F1     //     for(i = currentLevel+1; i<=8; i++){
                 ; 0000 00F2     //         if(order[i]){
                 ; 0000 00F3     //             lcd_putchar(i+'0');
                 ; 0000 00F4     //         }
                 ; 0000 00F5     //     }
                 ; 0000 00F6     // }
                 ; 0000 00F7 
                 ; 0000 00F8 
                 ; 0000 00F9     order[currentLevel] = false;
000328 e8a9      	LDI  R26,LOW(_order)
000329 e0b5      	LDI  R27,HIGH(_order)
00032a 0dac      	ADD  R26,R12
00032b 1dbd      	ADC  R27,R13
00032c e0e0      	LDI  R30,LOW(0)
00032d 93ec      	ST   X,R30
                 ; 0000 00FA     dung_DC();
00032e df07      	RCALL _dung_DC
                 ; 0000 00FB     vi_tri = 15;
00032f 940e 0940 	CALL SUBOPT_0x3
                 ; 0000 00FC     delay_ms(2000);
                 ; 0000 00FD     vi_tri = 10;
                 ; 0000 00FE 
                 ; 0000 00FF }
000331 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x42:
000500           	.BYTE 0x4A
                 ;
                 ;void main(void)
                 ; 0000 0102 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0103     //khoi_tao_led_7_doan();
                 ; 0000 0104     init_glcd(4, 66);
000332 e0e4      	LDI  R30,LOW(4)
000333 e0f0      	LDI  R31,HIGH(4)
000334 93fa      	ST   -Y,R31
000335 93ea      	ST   -Y,R30
000336 e4a2      	LDI  R26,LOW(66)
000337 e0b0      	LDI  R27,0
000338 decb      	RCALL _init_glcd
                 ; 0000 0105     init_lcd();
000339 dee8      	RCALL _init_lcd
                 ; 0000 0106     init_register();
00033a de81      	RCALL _init_register
                 ; 0000 0107     init_timer();
00033b deff      	RCALL _init_timer
                 ; 0000 0108     itoa(currentLevel, what);
00033c 92da      	ST   -Y,R13
00033d 92ca      	ST   -Y,R12
00033e e7a9      	LDI  R26,LOW(_what)
00033f e0b5      	LDI  R27,HIGH(_what)
000340 940e 0877 	CALL _itoa
                 ; 0000 0109     glcd_outtextxy(30, 20, what);
000342 e1ee      	LDI  R30,LOW(30)
000343 93ea      	ST   -Y,R30
000344 e1e4      	LDI  R30,LOW(20)
000345 93ea      	ST   -Y,R30
000346 e7a9      	LDI  R26,LOW(_what)
000347 e0b5      	LDI  R27,HIGH(_what)
000348 940e 07b7 	CALL _glcd_outtextxy
                 ; 0000 010A 
                 ; 0000 010B while (1)
                 _0x45:
                 ; 0000 010C     {
                 ; 0000 010D     // Please write your application code here
                 ; 0000 010E         thang_may();
00034a df4d      	RCALL _thang_may
                 ; 0000 010F     }
00034b cffe      	RJMP _0x45
                 ; 0000 0110 }
                 _0x48:
00034c cfff      	RJMP _0x48
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _pcd8544_delay_G100:
                 ; .FSTART _pcd8544_delay_G100
00034d 9508      	RET
                 ; .FEND
                 _pcd8544_wrbus_G100:
                 ; .FSTART _pcd8544_wrbus_G100
00034e 93aa      	ST   -Y,R26
00034f 931a      	ST   -Y,R17
000350 91e0 0065 	LDS  R30,101
000352 7eef      	ANDI R30,0xEF
000353 93e0 0065 	STS  101,R30
000355 e018      	LDI  R17,LOW(8)
                 _0x2000004:
000356 dff6      	RCALL _pcd8544_delay_G100
000357 81e9      	LDD  R30,Y+1
000358 78e0      	ANDI R30,LOW(0x80)
000359 f021      	BREQ _0x2000006
00035a 91e0 0065 	LDS  R30,101
00035c 60e2      	ORI  R30,2
00035d c003      	RJMP _0x20000A0
                 _0x2000006:
00035e 91e0 0065 	LDS  R30,101
000360 7fed      	ANDI R30,0xFD
                 _0x20000A0:
000361 93e0 0065 	STS  101,R30
000363 81e9      	LDD  R30,Y+1
000364 0fee      	LSL  R30
000365 83e9      	STD  Y+1,R30
000366 dfe6      	RCALL _pcd8544_delay_G100
000367 91e0 0065 	LDS  R30,101
000369 60e4      	ORI  R30,4
00036a 93e0 0065 	STS  101,R30
00036c dfe0      	RCALL _pcd8544_delay_G100
00036d 91e0 0065 	LDS  R30,101
00036f 7feb      	ANDI R30,0xFB
000370 93e0 0065 	STS  101,R30
000372 5011      	SUBI R17,LOW(1)
000373 f711      	BRNE _0x2000004
000374 91e0 0065 	LDS  R30,101
000376 61e0      	ORI  R30,0x10
000377 93e0 0065 	STS  101,R30
000379 8118      	LDD  R17,Y+0
00037a 940c 08be 	JMP  _0x2120003
                 ; .FEND
                 _pcd8544_wrcmd:
                 ; .FSTART _pcd8544_wrcmd
00037c 93aa      	ST   -Y,R26
00037d 91e0 0065 	LDS  R30,101
00037f 7fee      	ANDI R30,0xFE
000380 93e0 0065 	STS  101,R30
000382 81a8      	LD   R26,Y
000383 dfca      	RCALL _pcd8544_wrbus_G100
000384 940c 0875 	JMP  _0x2120005
                 ; .FEND
                 _pcd8544_wrdata_G100:
                 ; .FSTART _pcd8544_wrdata_G100
000386 93aa      	ST   -Y,R26
000387 91e0 0065 	LDS  R30,101
000389 60e1      	ORI  R30,1
00038a 93e0 0065 	STS  101,R30
00038c 81a8      	LD   R26,Y
00038d dfc0      	RCALL _pcd8544_wrbus_G100
00038e 940c 0875 	JMP  _0x2120005
                 ; .FEND
                 _pcd8544_setaddr_G100:
                 ; .FSTART _pcd8544_setaddr_G100
000390 93aa      	ST   -Y,R26
000391 931a      	ST   -Y,R17
000392 81e9      	LDD  R30,Y+1
000393 95e6      	LSR  R30
000394 95e6      	LSR  R30
000395 95e6      	LSR  R30
000396 2f1e      	MOV  R17,R30
000397 e5e4      	LDI  R30,LOW(84)
000398 9fe1      	MUL  R30,R17
000399 01f0      	MOVW R30,R0
00039a 01df      	MOVW R26,R30
00039b 81ea      	LDD  R30,Y+2
00039c e0f0      	LDI  R31,0
00039d 0fea      	ADD  R30,R26
00039e 1ffb      	ADC  R31,R27
00039f 93e0 0592 	STS  _gfx_addr_G100,R30
0003a1 93f0 0593 	STS  _gfx_addr_G100+1,R31
0003a3 2fe1      	MOV  R30,R17
0003a4 8118      	LDD  R17,Y+0
0003a5 940c 0905 	JMP  _0x2120002
                 ; .FEND
                 _pcd8544_gotoxy:
                 ; .FSTART _pcd8544_gotoxy
0003a7 93aa      	ST   -Y,R26
0003a8 81e9      	LDD  R30,Y+1
0003a9 68e0      	ORI  R30,0x80
0003aa 2fae      	MOV  R26,R30
0003ab dfd0      	RCALL _pcd8544_wrcmd
0003ac 81e9      	LDD  R30,Y+1
0003ad 93ea      	ST   -Y,R30
0003ae 81a9      	LDD  R26,Y+1
0003af dfe0      	RCALL _pcd8544_setaddr_G100
0003b0 64e0      	ORI  R30,0x40
0003b1 2fae      	MOV  R26,R30
0003b2 dfc9      	RCALL _pcd8544_wrcmd
0003b3 940c 08be 	JMP  _0x2120003
                 ; .FEND
                 _pcd8544_rdbyte:
                 ; .FSTART _pcd8544_rdbyte
0003b5 93aa      	ST   -Y,R26
0003b6 81e9      	LDD  R30,Y+1
0003b7 93ea      	ST   -Y,R30
0003b8 81a9      	LDD  R26,Y+1
0003b9 dfed      	RCALL _pcd8544_gotoxy
0003ba 91e0 0592 	LDS  R30,_gfx_addr_G100
0003bc 91f0 0593 	LDS  R31,_gfx_addr_G100+1
0003be 56ec      	SUBI R30,LOW(-_gfx_buffer_G100)
0003bf 4ffa      	SBCI R31,HIGH(-_gfx_buffer_G100)
0003c0 81e0      	LD   R30,Z
0003c1 940c 08be 	JMP  _0x2120003
                 ; .FEND
                 _pcd8544_wrbyte:
                 ; .FSTART _pcd8544_wrbyte
0003c3 93aa      	ST   -Y,R26
0003c4 940e 096c 	CALL SUBOPT_0x8
0003c6 81a8      	LD   R26,Y
0003c7 83a0      	STD  Z+0,R26
0003c8 dfbd      	RCALL _pcd8544_wrdata_G100
0003c9 940c 0875 	JMP  _0x2120005
                 ; .FEND
                 _glcd_init:
                 ; .FSTART _glcd_init
0003cb 93ba      	ST   -Y,R27
0003cc 93aa      	ST   -Y,R26
0003cd 940e 0a46 	CALL __SAVELOCR4
0003cf 91e0 0064 	LDS  R30,100
0003d1 61e0      	ORI  R30,0x10
0003d2 940e 0977 	CALL SUBOPT_0x9
0003d4 61e0      	ORI  R30,0x10
0003d5 93e0 0065 	STS  101,R30
0003d7 91e0 0064 	LDS  R30,100
0003d9 60e4      	ORI  R30,4
0003da 940e 0977 	CALL SUBOPT_0x9
0003dc 7feb      	ANDI R30,0xFB
0003dd 93e0 0065 	STS  101,R30
0003df 91e0 0064 	LDS  R30,100
0003e1 60e2      	ORI  R30,2
0003e2 93e0 0064 	STS  100,R30
0003e4 91e0 0064 	LDS  R30,100
0003e6 60e1      	ORI  R30,1
0003e7 93e0 0064 	STS  100,R30
0003e9 91e0 0064 	LDS  R30,100
0003eb 60e8      	ORI  R30,8
0003ec 940e 0977 	CALL SUBOPT_0x9
0003ee 7fe7      	ANDI R30,0XF7
0003ef 93e0 0065 	STS  101,R30
0003f1 e0aa      	LDI  R26,LOW(10)
0003f2 e0b0      	LDI  R27,0
0003f3 940e 09fd 	CALL _delay_ms
0003f5 91e0 0065 	LDS  R30,101
0003f7 60e8      	ORI  R30,8
0003f8 93e0 0065 	STS  101,R30
0003fa 81ec      	LDD  R30,Y+4
0003fb 81fd      	LDD  R31,Y+4+1
0003fc 9730      	SBIW R30,0
0003fd f121      	BREQ _0x2000008
0003fe 81e6      	LDD  R30,Z+6
0003ff 70e3      	ANDI R30,LOW(0x3)
000400 2f1e      	MOV  R17,R30
000401 81ec      	LDD  R30,Y+4
000402 81fd      	LDD  R31,Y+4+1
000403 81e6      	LDD  R30,Z+6
000404 95e6      	LSR  R30
000405 95e6      	LSR  R30
000406 70e7      	ANDI R30,LOW(0x7)
000407 2f0e      	MOV  R16,R30
000408 81ec      	LDD  R30,Y+4
000409 81fd      	LDD  R31,Y+4+1
00040a 81e7      	LDD  R30,Z+7
00040b 77ef      	ANDI R30,0x7F
00040c 2f3e      	MOV  R19,R30
00040d 81ac      	LDD  R26,Y+4
00040e 81bd      	LDD  R27,Y+4+1
00040f 940e 0a1f 	CALL __GETW1P
                +
000411 93e0 054e+STS _glcd_state + ( 4 ) , R30
000413 93f0 054f+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
000415 9612      	ADIW R26,2
000416 940e 0a1f 	CALL __GETW1P
                +
000418 93e0 0563+STS _glcd_state + ( 25 ) , R30
00041a 93f0 0564+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
00041c 81ac      	LDD  R26,Y+4
00041d 81bd      	LDD  R27,Y+4+1
00041e 9614      	ADIW R26,4
00041f 940e 0a1f 	CALL __GETW1P
000421 c00d      	RJMP _0x20000A1
                 _0x2000008:
000422 e010      	LDI  R17,LOW(0)
000423 e003      	LDI  R16,LOW(3)
000424 e332      	LDI  R19,LOW(50)
000425 e0e0      	LDI  R30,LOW(0)
000426 e0f0      	LDI  R31,HIGH(0)
                +
000427 93e0 054e+STS _glcd_state + ( 4 ) , R30
000429 93f0 054f+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
                +
00042b 93e0 0563+STS _glcd_state + ( 25 ) , R30
00042d 93f0 0564+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
                 _0x20000A1:
                +
00042f 93e0 0565+STS _glcd_state + ( 27 ) , R30
000431 93f0 0566+STS _glcd_state + ( 27 ) + 1 , R31
                 	__PUTW1MN _glcd_state,27
000433 e2a1      	LDI  R26,LOW(33)
000434 df47      	RCALL _pcd8544_wrcmd
000435 2fe1      	MOV  R30,R17
000436 60e4      	ORI  R30,4
000437 2fae      	MOV  R26,R30
000438 df43      	RCALL _pcd8544_wrcmd
000439 2fe0      	MOV  R30,R16
00043a 61e0      	ORI  R30,0x10
00043b 2fae      	MOV  R26,R30
00043c df3f      	RCALL _pcd8544_wrcmd
00043d 2fe3      	MOV  R30,R19
00043e 68e0      	ORI  R30,0x80
00043f 2fae      	MOV  R26,R30
000440 df3b      	RCALL _pcd8544_wrcmd
000441 e2a0      	LDI  R26,LOW(32)
000442 df39      	RCALL _pcd8544_wrcmd
000443 e0a1      	LDI  R26,LOW(1)
000444 d022      	RCALL _glcd_display
000445 e0e1      	LDI  R30,LOW(1)
000446 93e0 054a 	STS  _glcd_state,R30
000448 e0e0      	LDI  R30,LOW(0)
                +
000449 93e0 054b+STS _glcd_state + ( 1 ) , R30
                 	__PUTB1MN _glcd_state,1
00044b e0e1      	LDI  R30,LOW(1)
                +
00044c 93e0 0550+STS _glcd_state + ( 6 ) , R30
                 	__PUTB1MN _glcd_state,6
                +
00044e 93e0 0551+STS _glcd_state + ( 7 ) , R30
                 	__PUTB1MN _glcd_state,7
                +
000450 93e0 0552+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
000452 efef      	LDI  R30,LOW(255)
                +
000453 93e0 0553+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
000455 e0e1      	LDI  R30,LOW(1)
                +
000456 93e0 055a+STS _glcd_state + ( 16 ) , R30
                 	__PUTB1MN _glcd_state,16
                +
000458 e5eb     +LDI R30 , LOW ( _glcd_state + ( 17 ) )
000459 e0f5     +LDI R31 , HIGH ( _glcd_state + ( 17 ) )
                 	__POINTW1MN _glcd_state,17
00045a 93fa      	ST   -Y,R31
00045b 93ea      	ST   -Y,R30
00045c efef      	LDI  R30,LOW(255)
00045d 93ea      	ST   -Y,R30
00045e e0a8      	LDI  R26,LOW(8)
00045f e0b0      	LDI  R27,0
000460 940e 08a5 	CALL _memset
000462 d00f      	RCALL _glcd_clear
000463 e0e1      	LDI  R30,LOW(1)
000464 940e 0a4d 	CALL __LOADLOCR4
000466 c060      	RJMP _0x212000A
                 ; .FEND
                 _glcd_display:
                 ; .FSTART _glcd_display
000467 93aa      	ST   -Y,R26
000468 81e8      	LD   R30,Y
000469 30e0      	CPI  R30,0
00046a f011      	BREQ _0x200000A
00046b e0ec      	LDI  R30,LOW(12)
00046c c001      	RJMP _0x200000B
                 _0x200000A:
00046d e0e8      	LDI  R30,LOW(8)
                 _0x200000B:
00046e 2fae      	MOV  R26,R30
00046f df0c      	RCALL _pcd8544_wrcmd
000470 940c 0875 	JMP  _0x2120005
                 ; .FEND
                 _glcd_clear:
                 ; .FSTART _glcd_clear
000472 940e 0a46 	CALL __SAVELOCR4
000474 e030      	LDI  R19,0
                +
000475 91e0 054b+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000477 30e0      	CPI  R30,0
000478 f009      	BREQ _0x200000D
000479 ef3f      	LDI  R19,LOW(255)
                 _0x200000D:
00047a e0e0      	LDI  R30,LOW(0)
00047b 93ea      	ST   -Y,R30
00047c e0a0      	LDI  R26,LOW(0)
00047d df29      	RCALL _pcd8544_gotoxy
                +
00047e ef08     +LDI R16 , LOW ( 504 )
00047f e011     +LDI R17 , HIGH ( 504 )
                 	__GETWRN 16,17,504
                 _0x200000E:
000480 01f8      	MOVW R30,R16
                +
000481 5001     +SUBI R16 , LOW ( 1 )
000482 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
000483 9730      	SBIW R30,0
000484 f019      	BREQ _0x2000010
000485 2fa3      	MOV  R26,R19
000486 df3c      	RCALL _pcd8544_wrbyte
000487 cff8      	RJMP _0x200000E
                 _0x2000010:
000488 e0e0      	LDI  R30,LOW(0)
000489 93ea      	ST   -Y,R30
00048a e0a0      	LDI  R26,LOW(0)
00048b d33b      	RCALL _glcd_moveto
00048c 940e 0a4d 	CALL __LOADLOCR4
00048e 940c 0924 	JMP  _0x2120001
                 ; .FEND
                 _pcd8544_wrmasked_G100:
                 ; .FSTART _pcd8544_wrmasked_G100
000490 93aa      	ST   -Y,R26
000491 931a      	ST   -Y,R17
000492 81ed      	LDD  R30,Y+5
000493 93ea      	ST   -Y,R30
000494 81ad      	LDD  R26,Y+5
000495 df1f      	RCALL _pcd8544_rdbyte
000496 2f1e      	MOV  R17,R30
000497 81e9      	LDD  R30,Y+1
000498 30e7      	CPI  R30,LOW(0x7)
000499 f011      	BREQ _0x2000020
00049a 30e8      	CPI  R30,LOW(0x8)
00049b f439      	BRNE _0x2000021
                 _0x2000020:
00049c 81eb      	LDD  R30,Y+3
00049d 93ea      	ST   -Y,R30
00049e 81aa      	LDD  R26,Y+2
00049f 940e 08c0 	CALL _glcd_mappixcolor1bit
0004a1 83eb      	STD  Y+3,R30
0004a2 c008      	RJMP _0x2000022
                 _0x2000021:
0004a3 30e3      	CPI  R30,LOW(0x3)
0004a4 f421      	BRNE _0x2000024
0004a5 81eb      	LDD  R30,Y+3
0004a6 95e0      	COM  R30
0004a7 83eb      	STD  Y+3,R30
0004a8 c002      	RJMP _0x2000025
                 _0x2000024:
0004a9 30e0      	CPI  R30,0
0004aa f421      	BRNE _0x2000026
                 _0x2000025:
                 _0x2000022:
0004ab 81ea      	LDD  R30,Y+2
0004ac 95e0      	COM  R30
0004ad 231e      	AND  R17,R30
0004ae c002      	RJMP _0x2000027
                 _0x2000026:
0004af 30e2      	CPI  R30,LOW(0x2)
0004b0 f429      	BRNE _0x2000028
                 _0x2000027:
0004b1 81ea      	LDD  R30,Y+2
0004b2 81ab      	LDD  R26,Y+3
0004b3 23ea      	AND  R30,R26
0004b4 2b1e      	OR   R17,R30
0004b5 c00e      	RJMP _0x200001E
                 _0x2000028:
0004b6 30e1      	CPI  R30,LOW(0x1)
0004b7 f429      	BRNE _0x2000029
0004b8 81ea      	LDD  R30,Y+2
0004b9 81ab      	LDD  R26,Y+3
0004ba 23ea      	AND  R30,R26
0004bb 271e      	EOR  R17,R30
0004bc c007      	RJMP _0x200001E
                 _0x2000029:
0004bd 30e4      	CPI  R30,LOW(0x4)
0004be f429      	BRNE _0x200001E
0004bf 81ea      	LDD  R30,Y+2
0004c0 95e0      	COM  R30
0004c1 81ab      	LDD  R26,Y+3
0004c2 2bea      	OR   R30,R26
0004c3 231e      	AND  R17,R30
                 _0x200001E:
0004c4 2fa1      	MOV  R26,R17
0004c5 defd      	RCALL _pcd8544_wrbyte
0004c6 8118      	LDD  R17,Y+0
                 _0x212000A:
0004c7 9626      	ADIW R28,6
0004c8 9508      	RET
                 ; .FEND
                 _glcd_block:
                 ; .FSTART _glcd_block
0004c9 93aa      	ST   -Y,R26
0004ca 9723      	SBIW R28,3
0004cb 940e 0a44 	CALL __SAVELOCR6
0004cd 89a8      	LDD  R26,Y+16
0004ce 35a4      	CPI  R26,LOW(0x54)
0004cf f448      	BRSH _0x200002C
0004d0 85af      	LDD  R26,Y+15
0004d1 33a0      	CPI  R26,LOW(0x30)
0004d2 f430      	BRSH _0x200002C
0004d3 85ae      	LDD  R26,Y+14
0004d4 30a0      	CPI  R26,LOW(0x0)
0004d5 f019      	BREQ _0x200002C
0004d6 85ad      	LDD  R26,Y+13
0004d7 30a0      	CPI  R26,LOW(0x0)
0004d8 f409      	BRNE _0x200002B
                 _0x200002C:
0004d9 c1cc      	RJMP _0x2120009
                 _0x200002B:
0004da 85ee      	LDD  R30,Y+14
0004db 87e8      	STD  Y+8,R30
0004dc 89a8      	LDD  R26,Y+16
0004dd 27bb      	CLR  R27
0004de 85ee      	LDD  R30,Y+14
0004df e0f0      	LDI  R31,0
0004e0 0fae      	ADD  R26,R30
0004e1 1fbf      	ADC  R27,R31
0004e2 35a5      	CPI  R26,LOW(0x55)
0004e3 e0e0      	LDI  R30,HIGH(0x55)
0004e4 07be      	CPC  R27,R30
0004e5 f020      	BRLO _0x200002E
0004e6 89a8      	LDD  R26,Y+16
0004e7 e5e4      	LDI  R30,LOW(84)
0004e8 1bea      	SUB  R30,R26
0004e9 87ee      	STD  Y+14,R30
                 _0x200002E:
0004ea 852d      	LDD  R18,Y+13
0004eb 85af      	LDD  R26,Y+15
0004ec 27bb      	CLR  R27
0004ed 85ed      	LDD  R30,Y+13
0004ee e0f0      	LDI  R31,0
0004ef 0fae      	ADD  R26,R30
0004f0 1fbf      	ADC  R27,R31
0004f1 97d1      	SBIW R26,49
0004f2 f020      	BRLO _0x200002F
0004f3 85af      	LDD  R26,Y+15
0004f4 e3e0      	LDI  R30,LOW(48)
0004f5 1bea      	SUB  R30,R26
0004f6 87ed      	STD  Y+13,R30
                 _0x200002F:
0004f7 85a9      	LDD  R26,Y+9
0004f8 30a6      	CPI  R26,LOW(0x6)
0004f9 f009      	BREQ PC+2
0004fa c05b      	RJMP _0x2000030
0004fb 85ec      	LDD  R30,Y+12
0004fc 30e1      	CPI  R30,LOW(0x1)
0004fd f409      	BRNE _0x2000034
0004fe c1a7      	RJMP _0x2120009
                 _0x2000034:
0004ff 30e3      	CPI  R30,LOW(0x3)
000500 f439      	BRNE _0x2000037
                +
000501 91e0 0565+LDS R30 , _glcd_state + ( 27 )
000503 91f0 0566+LDS R31 , _glcd_state + ( 27 ) + 1
                 	__GETW1MN _glcd_state,27
000505 9730      	SBIW R30,0
000506 f409      	BRNE _0x2000036
000507 c19e      	RJMP _0x2120009
                 _0x2000036:
                 _0x2000037:
000508 8508      	LDD  R16,Y+8
000509 85ed      	LDD  R30,Y+13
00050a 95e6      	LSR  R30
00050b 95e6      	LSR  R30
00050c 95e6      	LSR  R30
00050d 2f3e      	MOV  R19,R30
00050e 2fe2      	MOV  R30,R18
00050f 70e7      	ANDI R30,LOW(0x7)
000510 f419      	BRNE _0x2000039
000511 85ad      	LDD  R26,Y+13
000512 172a      	CP   R18,R26
000513 f0e9      	BREQ _0x2000038
                 _0x2000039:
000514 2fa0      	MOV  R26,R16
000515 27bb      	CLR  R27
000516 2fe3      	MOV  R30,R19
000517 e0f0      	LDI  R31,0
000518 940e 0a17 	CALL __MULW12U
00051a 85aa      	LDD  R26,Y+10
00051b 85bb      	LDD  R27,Y+10+1
00051c 940e 097c 	CALL SUBOPT_0xA
00051e 9526      	LSR  R18
00051f 9526      	LSR  R18
000520 9526      	LSR  R18
000521 2f53      	MOV  R21,R19
                 _0x200003B:
000522 935f      	PUSH R21
000523 5f5f      	SUBI R21,-1
000524 2fe2      	MOV  R30,R18
000525 91af      	POP  R26
000526 17ea      	CP   R30,R26
000527 f048      	BRLO _0x200003D
000528 2f10      	MOV  R17,R16
                 _0x200003E:
000529 2fe1      	MOV  R30,R17
00052a 5011      	SUBI R17,1
00052b 30e0      	CPI  R30,0
00052c f019      	BREQ _0x2000040
00052d 940e 0981 	CALL SUBOPT_0xB
00052f cff9      	RJMP _0x200003E
                 _0x2000040:
000530 cff1      	RJMP _0x200003B
                 _0x200003D:
                 _0x2000038:
000531 85ae      	LDD  R26,Y+14
000532 170a      	CP   R16,R26
000533 f111      	BREQ _0x2000041
000534 85ee      	LDD  R30,Y+14
000535 85aa      	LDD  R26,Y+10
000536 85bb      	LDD  R27,Y+10+1
000537 e0f0      	LDI  R31,0
000538 940e 097c 	CALL SUBOPT_0xA
00053a 85ed      	LDD  R30,Y+13
00053b 70e7      	ANDI R30,LOW(0x7)
00053c f009      	BREQ _0x2000042
00053d 5f3f      	SUBI R19,-LOW(1)
                 _0x2000042:
00053e e020      	LDI  R18,LOW(0)
                 _0x2000043:
00053f 932f      	PUSH R18
000540 5f2f      	SUBI R18,-1
000541 2fe3      	MOV  R30,R19
000542 91af      	POP  R26
000543 17ae      	CP   R26,R30
000544 f488      	BRSH _0x2000045
000545 851e      	LDD  R17,Y+14
                 _0x2000046:
000546 931f      	PUSH R17
000547 5f1f      	SUBI R17,-1
000548 2fe0      	MOV  R30,R16
000549 91af      	POP  R26
00054a 17ae      	CP   R26,R30
00054b f418      	BRSH _0x2000048
00054c 940e 0981 	CALL SUBOPT_0xB
00054e cff7      	RJMP _0x2000046
                 _0x2000048:
00054f 85ee      	LDD  R30,Y+14
000550 81ae      	LDD  R26,Y+6
000551 81bf      	LDD  R27,Y+6+1
000552 e0f0      	LDI  R31,0
000553 940e 097c 	CALL SUBOPT_0xA
000555 cfe9      	RJMP _0x2000043
                 _0x2000045:
                 _0x2000041:
                 _0x2000030:
000556 85ef      	LDD  R30,Y+15
000557 70e7      	ANDI R30,LOW(0x7)
000558 2f3e      	MOV  R19,R30
                 _0x2000049:
000559 85ed      	LDD  R30,Y+13
00055a 30e0      	CPI  R30,0
00055b f409      	BRNE PC+2
00055c c149      	RJMP _0x200004B
00055d 85ea      	LDD  R30,Y+10
00055e 85fb      	LDD  R31,Y+10+1
00055f 83ee      	STD  Y+6,R30
000560 83ff      	STD  Y+6+1,R31
000561 e010      	LDI  R17,LOW(0)
000562 8908      	LDD  R16,Y+16
000563 3030      	CPI  R19,0
000564 f009      	BREQ PC+2
000565 c063      	RJMP _0x200004C
000566 85ad      	LDD  R26,Y+13
000567 30a8      	CPI  R26,LOW(0x8)
000568 f408      	BRSH PC+2
000569 c05a      	RJMP _0x200004D
00056a 85e9      	LDD  R30,Y+9
00056b 30e0      	CPI  R30,0
00056c f011      	BREQ _0x2000052
00056d 30e3      	CPI  R30,LOW(0x3)
00056e f409      	BRNE _0x2000053
                 _0x2000052:
00056f c002      	RJMP _0x2000054
                 _0x2000053:
000570 30e7      	CPI  R30,LOW(0x7)
000571 f409      	BRNE _0x2000055
                 _0x2000054:
000572 c002      	RJMP _0x2000056
                 _0x2000055:
000573 30e8      	CPI  R30,LOW(0x8)
000574 f409      	BRNE _0x2000057
                 _0x2000056:
000575 c002      	RJMP _0x2000058
                 _0x2000057:
000576 30e9      	CPI  R30,LOW(0x9)
000577 f409      	BRNE _0x2000059
                 _0x2000058:
000578 c002      	RJMP _0x200005A
                 _0x2000059:
000579 30ea      	CPI  R30,LOW(0xA)
00057a f421      	BRNE _0x200005B
                 _0x200005A:
00057b 930a      	ST   -Y,R16
00057c 89a8      	LDD  R26,Y+16
00057d de29      	RCALL _pcd8544_gotoxy
00057e c004      	RJMP _0x2000050
                 _0x200005B:
00057f 30e6      	CPI  R30,LOW(0x6)
000580 f411      	BRNE _0x2000050
000581 940e 098e 	CALL SUBOPT_0xC
                 _0x2000050:
                 _0x200005D:
000583 931f      	PUSH R17
000584 5f1f      	SUBI R17,-1
000585 85ee      	LDD  R30,Y+14
000586 91af      	POP  R26
000587 17ae      	CP   R26,R30
000588 f5a0      	BRSH _0x200005F
000589 85a9      	LDD  R26,Y+9
00058a 30a6      	CPI  R26,LOW(0x6)
00058b f451      	BRNE _0x2000060
00058c 940e 0992 	CALL SUBOPT_0xD
00058e 93fa      	ST   -Y,R31
00058f 93ea      	ST   -Y,R30
000590 940e 096c 	CALL SUBOPT_0x8
000592 81a0      	LD   R26,Z
000593 940e 0907 	CALL _glcd_writemem
000595 c026      	RJMP _0x2000061
                 _0x2000060:
000596 85e9      	LDD  R30,Y+9
000597 30e9      	CPI  R30,LOW(0x9)
000598 f411      	BRNE _0x2000065
000599 e050      	LDI  R21,LOW(0)
00059a c00e      	RJMP _0x2000066
                 _0x2000065:
00059b 30ea      	CPI  R30,LOW(0xA)
00059c f411      	BRNE _0x2000064
00059d ef5f      	LDI  R21,LOW(255)
00059e c00a      	RJMP _0x2000066
                 _0x2000064:
00059f 940e 0992 	CALL SUBOPT_0xD
0005a1 940e 099b 	CALL SUBOPT_0xE
0005a3 2f5e      	MOV  R21,R30
0005a4 85e9      	LDD  R30,Y+9
0005a5 30e7      	CPI  R30,LOW(0x7)
0005a6 f011      	BREQ _0x200006D
0005a7 30e8      	CPI  R30,LOW(0x8)
0005a8 f421      	BRNE _0x200006E
                 _0x200006D:
                 _0x2000066:
0005a9 940e 09a1 	CALL SUBOPT_0xF
0005ab 2f5e      	MOV  R21,R30
0005ac c006      	RJMP _0x200006F
                 _0x200006E:
0005ad 30e3      	CPI  R30,LOW(0x3)
0005ae f411      	BRNE _0x2000071
0005af 9550      	COM  R21
0005b0 c002      	RJMP _0x2000072
                 _0x2000071:
0005b1 30e0      	CPI  R30,0
0005b2 f419      	BRNE _0x2000074
                 _0x2000072:
                 _0x200006F:
0005b3 2fa5      	MOV  R26,R21
0005b4 ddd1      	RCALL _pcd8544_wrdata_G100
0005b5 c006      	RJMP _0x200006B
                 _0x2000074:
0005b6 940e 09a5 	CALL SUBOPT_0x10
0005b8 efef      	LDI  R30,LOW(255)
0005b9 93ea      	ST   -Y,R30
0005ba 85ad      	LDD  R26,Y+13
0005bb ded4      	RCALL _pcd8544_wrmasked_G100
                 _0x200006B:
                 _0x2000061:
0005bc cfc6      	RJMP _0x200005D
                 _0x200005F:
0005bd 85ef      	LDD  R30,Y+15
0005be 5fe8      	SUBI R30,-LOW(8)
0005bf 87ef      	STD  Y+15,R30
0005c0 85ed      	LDD  R30,Y+13
0005c1 50e8      	SUBI R30,LOW(8)
0005c2 87ed      	STD  Y+13,R30
0005c3 c0d9      	RJMP _0x2000075
                 _0x200004D:
0005c4 855d      	LDD  R21,Y+13
0005c5 e020      	LDI  R18,LOW(0)
0005c6 e0e0      	LDI  R30,LOW(0)
0005c7 87ed      	STD  Y+13,R30
0005c8 c07e      	RJMP _0x2000076
                 _0x200004C:
0005c9 2fe3      	MOV  R30,R19
0005ca 85ad      	LDD  R26,Y+13
0005cb 0fae      	ADD  R26,R30
0005cc 30a9      	CPI  R26,LOW(0x9)
0005cd f420      	BRSH _0x2000077
0005ce 852d      	LDD  R18,Y+13
0005cf e0e0      	LDI  R30,LOW(0)
0005d0 87ed      	STD  Y+13,R30
0005d1 c003      	RJMP _0x2000078
                 _0x2000077:
0005d2 e0e8      	LDI  R30,LOW(8)
0005d3 1be3      	SUB  R30,R19
0005d4 2f2e      	MOV  R18,R30
                 _0x2000078:
0005d5 933a      	ST   -Y,R19
0005d6 2fa2      	MOV  R26,R18
0005d7 940e 08b5 	CALL _glcd_getmask
0005d9 2f4e      	MOV  R20,R30
0005da 85e9      	LDD  R30,Y+9
0005db 30e6      	CPI  R30,LOW(0x6)
0005dc f511      	BRNE _0x200007C
0005dd 940e 098e 	CALL SUBOPT_0xC
                 _0x200007D:
0005df 931f      	PUSH R17
0005e0 5f1f      	SUBI R17,-1
0005e1 85ee      	LDD  R30,Y+14
0005e2 91af      	POP  R26
0005e3 17ae      	CP   R26,R30
0005e4 f4c8      	BRSH _0x200007F
0005e5 940e 096c 	CALL SUBOPT_0x8
0005e7 81e0      	LD   R30,Z
0005e8 23e4      	AND  R30,R20
0005e9 2fae      	MOV  R26,R30
0005ea 2fe3      	MOV  R30,R19
0005eb 940e 0a0f 	CALL __LSRB12
0005ed 940e 09ab 	CALL SUBOPT_0x11
0005ef 2fe3      	MOV  R30,R19
0005f0 2fa4      	MOV  R26,R20
0005f1 940e 0a0f 	CALL __LSRB12
0005f3 95e0      	COM  R30
0005f4 21e1      	AND  R30,R1
0005f5 2b5e      	OR   R21,R30
0005f6 940e 0992 	CALL SUBOPT_0xD
0005f8 93fa      	ST   -Y,R31
0005f9 93ea      	ST   -Y,R30
0005fa 2fa5      	MOV  R26,R21
0005fb 940e 0907 	CALL _glcd_writemem
0005fd cfe1      	RJMP _0x200007D
                 _0x200007F:
0005fe c02c      	RJMP _0x200007B
                 _0x200007C:
0005ff 30e9      	CPI  R30,LOW(0x9)
000600 f411      	BRNE _0x2000080
000601 e050      	LDI  R21,LOW(0)
000602 c003      	RJMP _0x2000081
                 _0x2000080:
000603 30ea      	CPI  R30,LOW(0xA)
000604 f4a9      	BRNE _0x2000087
000605 ef5f      	LDI  R21,LOW(255)
                 _0x2000081:
000606 940e 09a1 	CALL SUBOPT_0xF
000608 2fae      	MOV  R26,R30
000609 2fe3      	MOV  R30,R19
00060a 940e 0a07 	CALL __LSLB12
00060c 2f5e      	MOV  R21,R30
                 _0x2000084:
00060d 931f      	PUSH R17
00060e 5f1f      	SUBI R17,-1
00060f 85ee      	LDD  R30,Y+14
000610 91af      	POP  R26
000611 17ae      	CP   R26,R30
000612 f430      	BRSH _0x2000086
000613 940e 09a5 	CALL SUBOPT_0x10
000615 934a      	ST   -Y,R20
000616 e0a0      	LDI  R26,LOW(0)
000617 de78      	RCALL _pcd8544_wrmasked_G100
000618 cff4      	RJMP _0x2000084
                 _0x2000086:
000619 c011      	RJMP _0x200007B
                 _0x2000087:
                 _0x2000088:
00061a 931f      	PUSH R17
00061b 5f1f      	SUBI R17,-1
00061c 85ee      	LDD  R30,Y+14
00061d 91af      	POP  R26
00061e 17ae      	CP   R26,R30
00061f f458      	BRSH _0x200008A
000620 940e 09b6 	CALL SUBOPT_0x12
000622 2fae      	MOV  R26,R30
000623 2fe3      	MOV  R30,R19
000624 940e 0a07 	CALL __LSLB12
000626 93ea      	ST   -Y,R30
000627 934a      	ST   -Y,R20
000628 85ad      	LDD  R26,Y+13
000629 de66      	RCALL _pcd8544_wrmasked_G100
00062a cfef      	RJMP _0x2000088
                 _0x200008A:
                 _0x200007B:
00062b 85ed      	LDD  R30,Y+13
00062c 30e0      	CPI  R30,0
00062d f409      	BRNE _0x200008B
00062e c077      	RJMP _0x200004B
                 _0x200008B:
00062f 85ad      	LDD  R26,Y+13
000630 30a8      	CPI  R26,LOW(0x8)
000631 f428      	BRSH _0x200008C
000632 85ed      	LDD  R30,Y+13
000633 1be2      	SUB  R30,R18
000634 2f5e      	MOV  R21,R30
000635 e0e0      	LDI  R30,LOW(0)
000636 c003      	RJMP _0x20000A2
                 _0x200008C:
000637 2f53      	MOV  R21,R19
000638 85ed      	LDD  R30,Y+13
000639 50e8      	SUBI R30,LOW(8)
                 _0x20000A2:
00063a 87ed      	STD  Y+13,R30
00063b e010      	LDI  R17,LOW(0)
00063c 85ef      	LDD  R30,Y+15
00063d 5fe8      	SUBI R30,-LOW(8)
00063e 87ef      	STD  Y+15,R30
00063f e0e8      	LDI  R30,LOW(8)
000640 1be3      	SUB  R30,R19
000641 2f2e      	MOV  R18,R30
000642 8908      	LDD  R16,Y+16
000643 85ea      	LDD  R30,Y+10
000644 85fb      	LDD  R31,Y+10+1
000645 83ee      	STD  Y+6,R30
000646 83ff      	STD  Y+6+1,R31
                 _0x2000076:
000647 2fe5      	MOV  R30,R21
000648 e0f0      	LDI  R31,0
000649 59e0      	SUBI R30,LOW(-__glcd_mask*2)
00064a 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
00064b 9144      	LPM  R20,Z
00064c 85e9      	LDD  R30,Y+9
00064d 30e6      	CPI  R30,LOW(0x6)
00064e f511      	BRNE _0x2000091
00064f 940e 098e 	CALL SUBOPT_0xC
                 _0x2000092:
000651 931f      	PUSH R17
000652 5f1f      	SUBI R17,-1
000653 85ee      	LDD  R30,Y+14
000654 91af      	POP  R26
000655 17ae      	CP   R26,R30
000656 f4c8      	BRSH _0x2000094
000657 940e 096c 	CALL SUBOPT_0x8
000659 81e0      	LD   R30,Z
00065a 23e4      	AND  R30,R20
00065b 2fae      	MOV  R26,R30
00065c 2fe2      	MOV  R30,R18
00065d 940e 0a07 	CALL __LSLB12
00065f 940e 09ab 	CALL SUBOPT_0x11
000661 2fe2      	MOV  R30,R18
000662 2fa4      	MOV  R26,R20
000663 940e 0a07 	CALL __LSLB12
000665 95e0      	COM  R30
000666 21e1      	AND  R30,R1
000667 2b5e      	OR   R21,R30
000668 940e 0992 	CALL SUBOPT_0xD
00066a 93fa      	ST   -Y,R31
00066b 93ea      	ST   -Y,R30
00066c 2fa5      	MOV  R26,R21
00066d 940e 0907 	CALL _glcd_writemem
00066f cfe1      	RJMP _0x2000092
                 _0x2000094:
000670 c02c      	RJMP _0x2000090
                 _0x2000091:
000671 30e9      	CPI  R30,LOW(0x9)
000672 f411      	BRNE _0x2000095
000673 e050      	LDI  R21,LOW(0)
000674 c003      	RJMP _0x2000096
                 _0x2000095:
000675 30ea      	CPI  R30,LOW(0xA)
000676 f4a9      	BRNE _0x200009C
000677 ef5f      	LDI  R21,LOW(255)
                 _0x2000096:
000678 940e 09a1 	CALL SUBOPT_0xF
00067a 2fae      	MOV  R26,R30
00067b 2fe2      	MOV  R30,R18
00067c 940e 0a0f 	CALL __LSRB12
00067e 2f5e      	MOV  R21,R30
                 _0x2000099:
00067f 931f      	PUSH R17
000680 5f1f      	SUBI R17,-1
000681 85ee      	LDD  R30,Y+14
000682 91af      	POP  R26
000683 17ae      	CP   R26,R30
000684 f430      	BRSH _0x200009B
000685 940e 09a5 	CALL SUBOPT_0x10
000687 934a      	ST   -Y,R20
000688 e0a0      	LDI  R26,LOW(0)
000689 de06      	RCALL _pcd8544_wrmasked_G100
00068a cff4      	RJMP _0x2000099
                 _0x200009B:
00068b c011      	RJMP _0x2000090
                 _0x200009C:
                 _0x200009D:
00068c 931f      	PUSH R17
00068d 5f1f      	SUBI R17,-1
00068e 85ee      	LDD  R30,Y+14
00068f 91af      	POP  R26
000690 17ae      	CP   R26,R30
000691 f458      	BRSH _0x200009F
000692 940e 09b6 	CALL SUBOPT_0x12
000694 2fae      	MOV  R26,R30
000695 2fe2      	MOV  R30,R18
000696 940e 0a0f 	CALL __LSRB12
000698 93ea      	ST   -Y,R30
000699 934a      	ST   -Y,R20
00069a 85ad      	LDD  R26,Y+13
00069b ddf4      	RCALL _pcd8544_wrmasked_G100
00069c cfef      	RJMP _0x200009D
                 _0x200009F:
                 _0x2000090:
                 _0x2000075:
00069d 85e8      	LDD  R30,Y+8
00069e 85aa      	LDD  R26,Y+10
00069f 85bb      	LDD  R27,Y+10+1
0006a0 e0f0      	LDI  R31,0
0006a1 0fea      	ADD  R30,R26
0006a2 1ffb      	ADC  R31,R27
0006a3 87ea      	STD  Y+10,R30
0006a4 87fb      	STD  Y+10+1,R31
0006a5 ceb3      	RJMP _0x2000049
                 _0x200004B:
                 _0x2120009:
0006a6 940e 0a4b 	CALL __LOADLOCR6
0006a8 9661      	ADIW R28,17
0006a9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_clipx:
                 ; .FSTART _glcd_clipx
0006aa 940e 09c3 	CALL SUBOPT_0x13
0006ac f024      	BRLT _0x2020003
0006ad e0e0      	LDI  R30,LOW(0)
0006ae e0f0      	LDI  R31,HIGH(0)
0006af 940c 08be 	JMP  _0x2120003
                 _0x2020003:
0006b1 81a8      	LD   R26,Y
0006b2 81b9      	LDD  R27,Y+1
0006b3 35a4      	CPI  R26,LOW(0x54)
0006b4 e0e0      	LDI  R30,HIGH(0x54)
0006b5 07be      	CPC  R27,R30
0006b6 f024      	BRLT _0x2020004
0006b7 e5e3      	LDI  R30,LOW(83)
0006b8 e0f0      	LDI  R31,HIGH(83)
0006b9 940c 08be 	JMP  _0x2120003
                 _0x2020004:
0006bb 81e8      	LD   R30,Y
0006bc 81f9      	LDD  R31,Y+1
0006bd 940c 08be 	JMP  _0x2120003
                 ; .FEND
                 _glcd_clipy:
                 ; .FSTART _glcd_clipy
0006bf 940e 09c3 	CALL SUBOPT_0x13
0006c1 f024      	BRLT _0x2020005
0006c2 e0e0      	LDI  R30,LOW(0)
0006c3 e0f0      	LDI  R31,HIGH(0)
0006c4 940c 08be 	JMP  _0x2120003
                 _0x2020005:
0006c6 81a8      	LD   R26,Y
0006c7 81b9      	LDD  R27,Y+1
0006c8 97d0      	SBIW R26,48
0006c9 f024      	BRLT _0x2020006
0006ca e2ef      	LDI  R30,LOW(47)
0006cb e0f0      	LDI  R31,HIGH(47)
0006cc 940c 08be 	JMP  _0x2120003
                 _0x2020006:
0006ce 81e8      	LD   R30,Y
0006cf 81f9      	LDD  R31,Y+1
0006d0 940c 08be 	JMP  _0x2120003
                 ; .FEND
                 _glcd_getcharw_G101:
                 ; .FSTART _glcd_getcharw_G101
0006d2 93ba      	ST   -Y,R27
0006d3 93aa      	ST   -Y,R26
0006d4 9723      	SBIW R28,3
0006d5 940e 09ca 	CALL SUBOPT_0x14
0006d7 018f      	MOVW R16,R30
0006d8 2e00      	MOV  R0,R16
0006d9 2a01      	OR   R0,R17
0006da f419      	BRNE _0x202000B
0006db e0e0      	LDI  R30,LOW(0)
0006dc e0f0      	LDI  R31,HIGH(0)
0006dd c05f      	RJMP _0x2120007
                 _0x202000B:
0006de 940e 09d1 	CALL SUBOPT_0x15
0006e0 820f      	STD  Y+7,R0
0006e1 940e 09d1 	CALL SUBOPT_0x15
0006e3 820e      	STD  Y+6,R0
0006e4 940e 09d1 	CALL SUBOPT_0x15
0006e6 8608      	STD  Y+8,R0
0006e7 85eb      	LDD  R30,Y+11
0006e8 85a8      	LDD  R26,Y+8
0006e9 17ea      	CP   R30,R26
0006ea f418      	BRSH _0x202000C
0006eb e0e0      	LDI  R30,LOW(0)
0006ec e0f0      	LDI  R31,HIGH(0)
0006ed c04f      	RJMP _0x2120007
                 _0x202000C:
0006ee 01f8      	MOVW R30,R16
                +
0006ef 5f0f     +SUBI R16 , LOW ( - 1 )
0006f0 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006f1 9154      	LPM  R21,Z
0006f2 85a8      	LDD  R26,Y+8
0006f3 27bb      	CLR  R27
0006f4 27ee      	CLR  R30
0006f5 0fa5      	ADD  R26,R21
0006f6 1fbe      	ADC  R27,R30
0006f7 85eb      	LDD  R30,Y+11
0006f8 e0f0      	LDI  R31,0
0006f9 17ea      	CP   R30,R26
0006fa 07fb      	CPC  R31,R27
0006fb f018      	BRLO _0x202000D
0006fc e0e0      	LDI  R30,LOW(0)
0006fd e0f0      	LDI  R31,HIGH(0)
0006fe c03e      	RJMP _0x2120007
                 _0x202000D:
0006ff 81ee      	LDD  R30,Y+6
000700 95e6      	LSR  R30
000701 95e6      	LSR  R30
000702 95e6      	LSR  R30
000703 2f4e      	MOV  R20,R30
000704 81ee      	LDD  R30,Y+6
000705 70e7      	ANDI R30,LOW(0x7)
000706 f009      	BREQ _0x202000E
000707 5f4f      	SUBI R20,-LOW(1)
                 _0x202000E:
000708 81ef      	LDD  R30,Y+7
000709 30e0      	CPI  R30,0
00070a f0a1      	BREQ _0x202000F
00070b 85a9      	LDD  R26,Y+9
00070c 85ba      	LDD  R27,Y+9+1
00070d 93ec      	ST   X,R30
00070e 85a8      	LDD  R26,Y+8
00070f 85eb      	LDD  R30,Y+11
000710 1bea      	SUB  R30,R26
000711 e0f0      	LDI  R31,0
000712 01df      	MOVW R26,R30
000713 81ef      	LDD  R30,Y+7
000714 e0f0      	LDI  R31,0
000715 940e 0a17 	CALL __MULW12U
000717 01df      	MOVW R26,R30
000718 2fe4      	MOV  R30,R20
000719 e0f0      	LDI  R31,0
00071a 940e 0a17 	CALL __MULW12U
00071c 0fe0      	ADD  R30,R16
00071d 1ff1      	ADC  R31,R17
00071e c01e      	RJMP _0x2120007
                 _0x202000F:
00071f 0198      	MOVW R18,R16
000720 2fe5      	MOV  R30,R21
000721 e0f0      	LDI  R31,0
                +
000722 0f0e     +ADD R16 , R30
000723 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 _0x2020010:
000724 85a8      	LDD  R26,Y+8
000725 5faf      	SUBI R26,-LOW(1)
000726 87a8      	STD  Y+8,R26
000727 50a1      	SUBI R26,LOW(1)
000728 85eb      	LDD  R30,Y+11
000729 17ae      	CP   R26,R30
00072a f460      	BRSH _0x2020012
00072b 01f9      	MOVW R30,R18
                +
00072c 5f2f     +SUBI R18 , LOW ( - 1 )
00072d 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00072e 91a4      	LPM  R26,Z
00072f e0b0      	LDI  R27,0
000730 2fe4      	MOV  R30,R20
000731 e0f0      	LDI  R31,0
000732 940e 0a17 	CALL __MULW12U
                +
000734 0f0e     +ADD R16 , R30
000735 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
000736 cfed      	RJMP _0x2020010
                 _0x2020012:
000737 01f9      	MOVW R30,R18
000738 91e4      	LPM  R30,Z
000739 85a9      	LDD  R26,Y+9
00073a 85ba      	LDD  R27,Y+9+1
00073b 93ec      	ST   X,R30
00073c 01f8      	MOVW R30,R16
                 _0x2120007:
00073d 940e 0a4b 	CALL __LOADLOCR6
                 _0x2120008:
00073f 962c      	ADIW R28,12
000740 9508      	RET
                 ; .FEND
                 _glcd_new_line_G101:
                 ; .FSTART _glcd_new_line_G101
000741 e0e0      	LDI  R30,LOW(0)
                +
000742 93e0 054c+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
                +
000744 91a0 054d+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000746 27bb      	CLR  R27
000747 940e 09d6 	CALL SUBOPT_0x16
000749 e0f0      	LDI  R31,0
00074a 0fae      	ADD  R26,R30
00074b 1fbf      	ADC  R27,R31
                +
00074c 91e0 0551+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
00074e e0f0      	LDI  R31,0
00074f 0fae      	ADD  R26,R30
000750 1fbf      	ADC  R27,R31
000751 df6d      	RCALL _glcd_clipy
                +
000752 93e0 054d+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000754 9508      	RET
                 ; .FEND
                 _glcd_putchar:
                 ; .FSTART _glcd_putchar
000755 93aa      	ST   -Y,R26
000756 9721      	SBIW R28,1
000757 940e 09ca 	CALL SUBOPT_0x14
000759 9730      	SBIW R30,0
00075a f409      	BRNE PC+2
00075b c055      	RJMP _0x202001F
00075c 81af      	LDD  R26,Y+7
00075d 30aa      	CPI  R26,LOW(0xA)
00075e f409      	BRNE _0x2020020
00075f c04f      	RJMP _0x2020021
                 _0x2020020:
000760 81ef      	LDD  R30,Y+7
000761 93ea      	ST   -Y,R30
000762 01de      	MOVW R26,R28
000763 9617      	ADIW R26,7
000764 df6d      	RCALL _glcd_getcharw_G101
000765 01af      	MOVW R20,R30
000766 9730      	SBIW R30,0
000767 f409      	BRNE _0x2020022
000768 c04a      	RJMP _0x2120006
                 _0x2020022:
                +
000769 91e0 0550+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
00076b 81ae      	LDD  R26,Y+6
00076c 0fea      	ADD  R30,R26
00076d 2f3e      	MOV  R19,R30
                +
00076e 91a0 054c+LDS R26 , _glcd_state + ( 2 )
                 	__GETB2MN _glcd_state,2
000770 27bb      	CLR  R27
000771 e0f0      	LDI  R31,0
000772 0fea      	ADD  R30,R26
000773 1ffb      	ADC  R31,R27
000774 018f      	MOVW R16,R30
                +
000775 3505     +CPI R16 , LOW ( 85 )
000776 e0e0     +LDI R30 , HIGH ( 85 )
000777 071e     +CPC R17 , R30
                 	__CPWRN 16,17,85
000778 f018      	BRLO _0x2020023
000779 2f03      	MOV  R16,R19
00077a 2711      	CLR  R17
00077b dfc5      	RCALL _glcd_new_line_G101
                 _0x2020023:
                +
00077c 91e0 054c+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
00077e 93ea      	ST   -Y,R30
                +
00077f 91e0 054d+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000781 93ea      	ST   -Y,R30
000782 85e8      	LDD  R30,Y+8
000783 93ea      	ST   -Y,R30
000784 940e 09d6 	CALL SUBOPT_0x16
000786 93ea      	ST   -Y,R30
000787 e0e1      	LDI  R30,LOW(1)
000788 93ea      	ST   -Y,R30
000789 935a      	ST   -Y,R21
00078a 934a      	ST   -Y,R20
00078b e0a7      	LDI  R26,LOW(7)
00078c dd3c      	RCALL _glcd_block
                +
00078d 91e0 054c+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
00078f 81ae      	LDD  R26,Y+6
000790 0fea      	ADD  R30,R26
000791 93ea      	ST   -Y,R30
                +
000792 91e0 054d+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
000794 93ea      	ST   -Y,R30
                +
000795 91e0 0550+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
000797 93ea      	ST   -Y,R30
000798 940e 09d6 	CALL SUBOPT_0x16
00079a 940e 09dd 	CALL SUBOPT_0x17
                +
00079c 91e0 054c+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
00079e 93ea      	ST   -Y,R30
                +
00079f 91a0 054d+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
0007a1 940e 09d6 	CALL SUBOPT_0x16
0007a3 0fea      	ADD  R30,R26
0007a4 93ea      	ST   -Y,R30
0007a5 933a      	ST   -Y,R19
                +
0007a6 91e0 0551+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
0007a8 940e 09dd 	CALL SUBOPT_0x17
0007aa e5e4      	LDI  R30,LOW(84)
0007ab e0f0      	LDI  R31,HIGH(84)
0007ac 17e0      	CP   R30,R16
0007ad 07f1      	CPC  R31,R17
0007ae f411      	BRNE _0x2020024
                 _0x2020021:
0007af df91      	RCALL _glcd_new_line_G101
0007b0 c002      	RJMP _0x2120006
                 _0x2020024:
                 _0x202001F:
                +
0007b1 9300 054c+STS _glcd_state + ( 2 ) , R16
                 	__PUTBMRN _glcd_state,2,16
                 _0x2120006:
0007b3 940e 0a4b 	CALL __LOADLOCR6
0007b5 9628      	ADIW R28,8
0007b6 9508      	RET
                 ; .FEND
                 _glcd_outtextxy:
                 ; .FSTART _glcd_outtextxy
0007b7 93ba      	ST   -Y,R27
0007b8 93aa      	ST   -Y,R26
0007b9 931a      	ST   -Y,R17
0007ba 81ec      	LDD  R30,Y+4
0007bb 93ea      	ST   -Y,R30
0007bc 81ac      	LDD  R26,Y+4
0007bd d009      	RCALL _glcd_moveto
                 _0x2020025:
0007be 940e 09e7 	CALL SUBOPT_0x18
0007c0 f019      	BREQ _0x2020027
0007c1 2fa1      	MOV  R26,R17
0007c2 df92      	RCALL _glcd_putchar
0007c3 cffa      	RJMP _0x2020025
                 _0x2020027:
0007c4 8118      	LDD  R17,Y+0
0007c5 940c 08b3 	JMP  _0x2120004
                 ; .FEND
                 _glcd_moveto:
                 ; .FSTART _glcd_moveto
0007c7 93aa      	ST   -Y,R26
0007c8 81a9      	LDD  R26,Y+1
0007c9 27bb      	CLR  R27
0007ca dedf      	RCALL _glcd_clipx
                +
0007cb 93e0 054c+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
0007cd 81a8      	LD   R26,Y
0007ce 27bb      	CLR  R27
0007cf deef      	RCALL _glcd_clipy
                +
0007d0 93e0 054d+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
0007d2 940c 08be 	JMP  _0x2120003
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
0007d4 93aa      	ST   -Y,R26
0007d5 81e8      	LD   R30,Y
0007d6 71e0      	ANDI R30,LOW(0x10)
0007d7 f011      	BREQ _0x2060004
0007d8 9adb      	SBI  0x1B,3
0007d9 c001      	RJMP _0x2060005
                 _0x2060004:
0007da 98db      	CBI  0x1B,3
                 _0x2060005:
0007db 81e8      	LD   R30,Y
0007dc 72e0      	ANDI R30,LOW(0x20)
0007dd f011      	BREQ _0x2060006
0007de 9adc      	SBI  0x1B,4
0007df c001      	RJMP _0x2060007
                 _0x2060006:
0007e0 98dc      	CBI  0x1B,4
                 _0x2060007:
0007e1 81e8      	LD   R30,Y
0007e2 74e0      	ANDI R30,LOW(0x40)
0007e3 f011      	BREQ _0x2060008
0007e4 9add      	SBI  0x1B,5
0007e5 c001      	RJMP _0x2060009
                 _0x2060008:
0007e6 98dd      	CBI  0x1B,5
                 _0x2060009:
0007e7 81e8      	LD   R30,Y
0007e8 78e0      	ANDI R30,LOW(0x80)
0007e9 f011      	BREQ _0x206000A
0007ea 9ade      	SBI  0x1B,6
0007eb c001      	RJMP _0x206000B
                 _0x206000A:
0007ec 98de      	CBI  0x1B,6
                 _0x206000B:
                +
0007ed e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0007ee 958a     +DEC R24
0007ef f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0007f0 9ada      	SBI  0x1B,2
                +
0007f1 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0007f2 958a     +DEC R24
0007f3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0007f4 98da      	CBI  0x1B,2
                +
0007f5 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0007f6 958a     +DEC R24
0007f7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0007f8 c07c      	RJMP _0x2120005
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0007f9 93aa      	ST   -Y,R26
0007fa 81a8      	LD   R26,Y
0007fb dfd8      	RCALL __lcd_write_nibble_G103
0007fc 81e8          ld    r30,y
0007fd 95e2          swap  r30
0007fe 83e8          st    y,r30
0007ff 81a8      	LD   R26,Y
000800 dfd3      	RCALL __lcd_write_nibble_G103
                +
000801 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000802 958a     +DEC R24
000803 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000804 c070      	RJMP _0x2120005
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000805 93aa      	ST   -Y,R26
000806 81e8      	LD   R30,Y
000807 e0f0      	LDI  R31,0
000808 57e4      	SUBI R30,LOW(-__base_y_G103)
000809 4ff8      	SBCI R31,HIGH(-__base_y_G103)
00080a 81e0      	LD   R30,Z
00080b 81a9      	LDD  R26,Y+1
00080c 0fae      	ADD  R26,R30
00080d dfeb      	RCALL __lcd_write_data
00080e 80a9      	LDD  R10,Y+1
00080f 81e8      	LD   R30,Y
000810 93e0 0790 	STS  __lcd_y,R30
000812 940c 08be 	JMP  _0x2120003
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000814 e0a2      	LDI  R26,LOW(2)
000815 940e 09ef 	CALL SUBOPT_0x19
000817 e0ac      	LDI  R26,LOW(12)
000818 dfe0      	RCALL __lcd_write_data
000819 e0a1      	LDI  R26,LOW(1)
00081a 940e 09ef 	CALL SUBOPT_0x19
00081c e0e0      	LDI  R30,LOW(0)
00081d 93e0 0790 	STS  __lcd_y,R30
00081f 2eae      	MOV  R10,R30
000820 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000821 93aa      	ST   -Y,R26
000822 81a8      	LD   R26,Y
000823 30aa      	CPI  R26,LOW(0xA)
000824 f021      	BREQ _0x2060011
000825 91e0 0791 	LDS  R30,__lcd_maxx
000827 16ae      	CP   R10,R30
000828 f060      	BRLO _0x2060010
                 _0x2060011:
000829 e0e0      	LDI  R30,LOW(0)
00082a 93ea      	ST   -Y,R30
00082b 91a0 0790 	LDS  R26,__lcd_y
00082d 5faf      	SUBI R26,-LOW(1)
00082e 93a0 0790 	STS  __lcd_y,R26
000830 dfd4      	RCALL _lcd_gotoxy
000831 81a8      	LD   R26,Y
000832 30aa      	CPI  R26,LOW(0xA)
000833 f409      	BRNE _0x2060013
000834 c040      	RJMP _0x2120005
                 _0x2060013:
                 _0x2060010:
000835 94a3      	INC  R10
000836 9ad8      	SBI  0x1B,0
000837 81a8      	LD   R26,Y
000838 dfc0      	RCALL __lcd_write_data
000839 98d8      	CBI  0x1B,0
00083a c03a      	RJMP _0x2120005
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00083b 93ba      	ST   -Y,R27
00083c 93aa      	ST   -Y,R26
00083d 931a      	ST   -Y,R17
                 _0x2060014:
00083e 940e 09e7 	CALL SUBOPT_0x18
000840 f019      	BREQ _0x2060016
000841 2fa1      	MOV  R26,R17
000842 dfde      	RCALL _lcd_putchar
000843 cffa      	RJMP _0x2060014
                 _0x2060016:
000844 8118      	LDD  R17,Y+0
000845 940c 0905 	JMP  _0x2120002
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000847 93aa      	ST   -Y,R26
000848 9ad3      	SBI  0x1A,3
000849 9ad4      	SBI  0x1A,4
00084a 9ad5      	SBI  0x1A,5
00084b 9ad6      	SBI  0x1A,6
00084c 9ad2      	SBI  0x1A,2
00084d 9ad0      	SBI  0x1A,0
00084e 9ad1      	SBI  0x1A,1
00084f 98da      	CBI  0x1B,2
000850 98d8      	CBI  0x1B,0
000851 98d9      	CBI  0x1B,1
000852 81e8      	LD   R30,Y
000853 93e0 0791 	STS  __lcd_maxx,R30
000855 58e0      	SUBI R30,-LOW(128)
                +
000856 93e0 078e+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000858 81e8      	LD   R30,Y
000859 54e0      	SUBI R30,-LOW(192)
                +
00085a 93e0 078f+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
00085c e1a4      	LDI  R26,LOW(20)
00085d e0b0      	LDI  R27,0
00085e 940e 09fd 	CALL _delay_ms
000860 940e 09f5 	CALL SUBOPT_0x1A
000862 940e 09f5 	CALL SUBOPT_0x1A
000864 940e 09f5 	CALL SUBOPT_0x1A
000866 e2a0      	LDI  R26,LOW(32)
000867 df6c      	RCALL __lcd_write_nibble_G103
                +
000868 ec88     +LDI R24 , LOW ( 200 )
000869 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00086a 9701     +SBIW R24 , 1
00086b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00086c e2a8      	LDI  R26,LOW(40)
00086d df8b      	RCALL __lcd_write_data
00086e e0a4      	LDI  R26,LOW(4)
00086f df89      	RCALL __lcd_write_data
000870 e8a5      	LDI  R26,LOW(133)
000871 df87      	RCALL __lcd_write_data
000872 e0a6      	LDI  R26,LOW(6)
000873 df85      	RCALL __lcd_write_data
000874 df9f      	RCALL _lcd_clear
                 _0x2120005:
000875 9621      	ADIW R28,1
000876 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000877 93ba      	ST   -Y,R27
000878 93aa      	ST   -Y,R26
000879 91a9          ld   r26,y+
00087a 91b9          ld   r27,y+
00087b 91e9          ld   r30,y+
00087c 91f9          ld   r31,y+
00087d 9630          adiw r30,0
00087e f42a          brpl __itoa0
00087f 95e0          com  r30
000880 95f0          com  r31
000881 9631          adiw r30,1
000882 e26d          ldi  r22,'-'
000883 936d          st   x+,r22
                 __itoa0:
000884 94e8          clt
000885 e180          ldi  r24,low(10000)
000886 e297          ldi  r25,high(10000)
000887 d00d          rcall __itoa1
000888 ee88          ldi  r24,low(1000)
000889 e093          ldi  r25,high(1000)
00088a d00a          rcall __itoa1
00088b e684          ldi  r24,100
00088c 2799          clr  r25
00088d d007          rcall __itoa1
00088e e08a          ldi  r24,10
00088f d005          rcall __itoa1
000890 2f6e          mov  r22,r30
000891 d010          rcall __itoa5
000892 2766          clr  r22
000893 936c          st   x,r22
000894 9508          ret
                 
                 __itoa1:
000895 2766          clr	 r22
                 __itoa2:
000896 17e8          cp   r30,r24
000897 07f9          cpc  r31,r25
000898 f020          brlo __itoa3
000899 9563          inc  r22
00089a 1be8          sub  r30,r24
00089b 0bf9          sbc  r31,r25
00089c f7c9          brne __itoa2
                 __itoa3:
00089d 2366          tst  r22
00089e f411          brne __itoa4
00089f f016          brts __itoa5
0008a0 9508          ret
                 __itoa4:
0008a1 9468          set
                 __itoa5:
0008a2 5d60          subi r22,-0x30
0008a3 936d          st   x+,r22
0008a4 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
0008a5 93ba      	ST   -Y,R27
0008a6 93aa      	ST   -Y,R26
0008a7 81b9          ldd  r27,y+1
0008a8 81a8          ld   r26,y
0008a9 9610          adiw r26,0
0008aa f031          breq memset1
0008ab 81fc          ldd  r31,y+4
0008ac 81eb          ldd  r30,y+3
0008ad 816a          ldd  r22,y+2
                 memset0:
0008ae 9361          st   z+,r22
0008af 9711          sbiw r26,1
0008b0 f7e9          brne memset0
                 memset1:
0008b1 81eb          ldd  r30,y+3
0008b2 81fc          ldd  r31,y+4
                 _0x2120004:
0008b3 9625      	ADIW R28,5
0008b4 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_getmask:
                 ; .FSTART _glcd_getmask
0008b5 93aa      	ST   -Y,R26
0008b6 81e8      	LD   R30,Y
0008b7 e0f0      	LDI  R31,0
0008b8 59e0      	SUBI R30,LOW(-__glcd_mask*2)
0008b9 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
0008ba 91a4      	LPM  R26,Z
0008bb 81e9      	LDD  R30,Y+1
0008bc 940e 0a07 	CALL __LSLB12
                 _0x2120003:
0008be 9622      	ADIW R28,2
0008bf 9508      	RET
                 ; .FEND
                 _glcd_mappixcolor1bit:
                 ; .FSTART _glcd_mappixcolor1bit
0008c0 93aa      	ST   -Y,R26
0008c1 931a      	ST   -Y,R17
0008c2 81e9      	LDD  R30,Y+1
0008c3 30e7      	CPI  R30,LOW(0x7)
0008c4 f011      	BREQ _0x20C0007
0008c5 30ea      	CPI  R30,LOW(0xA)
0008c6 f419      	BRNE _0x20C0008
                 _0x20C0007:
0008c7 9110 054a 	LDS  R17,_glcd_state
0008c9 c009      	RJMP _0x20C0009
                 _0x20C0008:
0008ca 30e9      	CPI  R30,LOW(0x9)
0008cb f419      	BRNE _0x20C000B
                +
0008cc 9110 054b+LDS R17 , _glcd_state + ( 1 )
                 	__GETBRMN 17,_glcd_state,1
0008ce c004      	RJMP _0x20C0009
                 _0x20C000B:
0008cf 30e8      	CPI  R30,LOW(0x8)
0008d0 f4a1      	BRNE _0x20C0005
                +
0008d1 9110 055a+LDS R17 , _glcd_state + ( 16 )
                 	__GETBRMN 17,_glcd_state,16
                 _0x20C0009:
                +
0008d3 91e0 054b+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
0008d5 30e0      	CPI  R30,0
0008d6 f049      	BREQ _0x20C000E
0008d7 3010      	CPI  R17,0
0008d8 f019      	BREQ _0x20C000F
0008d9 efef      	LDI  R30,LOW(255)
0008da 8118      	LDD  R17,Y+0
0008db c029      	RJMP _0x2120002
                 _0x20C000F:
0008dc 81ea      	LDD  R30,Y+2
0008dd 95e0      	COM  R30
0008de 8118      	LDD  R17,Y+0
0008df c025      	RJMP _0x2120002
                 _0x20C000E:
0008e0 3010      	CPI  R17,0
0008e1 f419      	BRNE _0x20C0011
0008e2 e0e0      	LDI  R30,LOW(0)
0008e3 8118      	LDD  R17,Y+0
0008e4 c020      	RJMP _0x2120002
                 _0x20C0011:
                 _0x20C0005:
0008e5 81ea      	LDD  R30,Y+2
0008e6 8118      	LDD  R17,Y+0
0008e7 c01d      	RJMP _0x2120002
                 ; .FEND
                 _glcd_readmem:
                 ; .FSTART _glcd_readmem
0008e8 93ba      	ST   -Y,R27
0008e9 93aa      	ST   -Y,R26
0008ea 81ea      	LDD  R30,Y+2
0008eb 30e1      	CPI  R30,LOW(0x1)
0008ec f421      	BRNE _0x20C0015
0008ed 81e8      	LD   R30,Y
0008ee 81f9      	LDD  R31,Y+1
0008ef 91e4      	LPM  R30,Z
0008f0 c014      	RJMP _0x2120002
                 _0x20C0015:
0008f1 30e2      	CPI  R30,LOW(0x2)
0008f2 f429      	BRNE _0x20C0016
0008f3 81a8      	LD   R26,Y
0008f4 81b9      	LDD  R27,Y+1
0008f5 940e 0a23 	CALL __EEPROMRDB
0008f7 c00d      	RJMP _0x2120002
                 _0x20C0016:
0008f8 30e3      	CPI  R30,LOW(0x3)
0008f9 f441      	BRNE _0x20C0018
0008fa 81a8      	LD   R26,Y
0008fb 81b9      	LDD  R27,Y+1
                +
0008fc 91e0 0563+LDS R30 , _glcd_state + ( 25 )
0008fe 91f0 0564+LDS R31 , _glcd_state + ( 25 ) + 1
000900 9509     +ICALL
                 	__CALL1MN _glcd_state,25
000901 c003      	RJMP _0x2120002
                 _0x20C0018:
000902 81a8      	LD   R26,Y
000903 81b9      	LDD  R27,Y+1
000904 91ec      	LD   R30,X
                 _0x2120002:
000905 9623      	ADIW R28,3
000906 9508      	RET
                 ; .FEND
                 _glcd_writemem:
                 ; .FSTART _glcd_writemem
000907 93aa      	ST   -Y,R26
000908 81eb      	LDD  R30,Y+3
000909 30e0      	CPI  R30,0
00090a f429      	BRNE _0x20C001C
00090b 81e8      	LD   R30,Y
00090c 81a9      	LDD  R26,Y+1
00090d 81ba      	LDD  R27,Y+1+1
00090e 93ec      	ST   X,R30
00090f c014      	RJMP _0x20C001B
                 _0x20C001C:
000910 30e2      	CPI  R30,LOW(0x2)
000911 f431      	BRNE _0x20C001D
000912 81e8      	LD   R30,Y
000913 81a9      	LDD  R26,Y+1
000914 81ba      	LDD  R27,Y+1+1
000915 940e 0a2f 	CALL __EEPROMWRB
000917 c00c      	RJMP _0x20C001B
                 _0x20C001D:
000918 30e3      	CPI  R30,LOW(0x3)
000919 f451      	BRNE _0x20C001B
00091a 81e9      	LDD  R30,Y+1
00091b 81fa      	LDD  R31,Y+1+1
00091c 93fa      	ST   -Y,R31
00091d 93ea      	ST   -Y,R30
00091e 81aa      	LDD  R26,Y+2
                +
00091f 91e0 0565+LDS R30 , _glcd_state + ( 27 )
000921 91f0 0566+LDS R31 , _glcd_state + ( 27 ) + 1
000923 9509     +ICALL
                 	__CALL1MN _glcd_state,27
                 _0x20C001B:
                 _0x2120001:
000924 9624      	ADIW R28,4
000925 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _glcd_state:
00054a           	.BYTE 0x1D
                 _keypad:
000567           	.BYTE 0x12
                 _what:
000579           	.BYTE 0x10
                 _order:
000589           	.BYTE 0x9
                 _gfx_addr_G100:
000592           	.BYTE 0x2
                 _gfx_buffer_G100:
000594           	.BYTE 0x1F8
                 __base_y_G103:
00078c           	.BYTE 0x4
                 __lcd_y:
000790           	.BYTE 0x1
                 __lcd_maxx:
000791           	.BYTE 0x1
                 __seed_G104:
000792           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x0:
000926 e0a6      	LDI  R26,LOW(6)
000927 9f0a      	MUL  R16,R26
000928 01f0      	MOVW R30,R0
000929 59e9      	SUBI R30,LOW(-_keypad)
00092a 4ffa      	SBCI R31,HIGH(-_keypad)
00092b 01df      	MOVW R26,R30
00092c 2fe3      	MOV  R30,R19
00092d e0f0      	LDI  R31,0
00092e 0fee      	LSL  R30
00092f 1fff      	ROL  R31
000930 0fae      	ADD  R26,R30
000931 1fbf      	ADC  R27,R31
000932 940e 0a1f 	CALL __GETW1P
000934 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000935 e0e8      	LDI  R30,LOW(8)
000936 e0f0      	LDI  R31,HIGH(8)
000937 15e8      	CP   R30,R8
000938 05f9      	CPC  R31,R9
000939 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
00093a e8a9      	LDI  R26,LOW(_order)
00093b e0b5      	LDI  R27,HIGH(_order)
00093c 0da8      	ADD  R26,R8
00093d 1db9      	ADC  R27,R9
00093e 91ac      	LD   R26,X
00093f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000940 e0ef      	LDI  R30,LOW(15)
000941 e0f0      	LDI  R31,HIGH(15)
000942 013f      	MOVW R6,R30
000943 eda0      	LDI  R26,LOW(2000)
000944 e0b7      	LDI  R27,HIGH(2000)
000945 940e 09fd 	CALL _delay_ms
000947 e0ea      	LDI  R30,LOW(10)
000948 e0f0      	LDI  R31,HIGH(10)
000949 013f      	MOVW R6,R30
00094a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00094b 940e 07b7 	CALL _glcd_outtextxy
00094d 940e 0814 	CALL _lcd_clear
00094f e0e0      	LDI  R30,LOW(0)
000950 93ea      	ST   -Y,R30
000951 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5:
000952 92da      	ST   -Y,R13
000953 92ca      	ST   -Y,R12
000954 e7a9      	LDI  R26,LOW(_what)
000955 e0b5      	LDI  R27,HIGH(_what)
000956 940e 0877 	CALL _itoa
000958 e0e5      	LDI  R30,LOW(5)
000959 93ea      	ST   -Y,R30
00095a e1e9      	LDI  R30,LOW(25)
00095b 93ea      	ST   -Y,R30
00095c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
00095d 940e 07b7 	CALL _glcd_outtextxy
00095f e3e7      	LDI  R30,LOW(55)
000960 93ea      	ST   -Y,R30
000961 e1e9      	LDI  R30,LOW(25)
000962 93ea      	ST   -Y,R30
000963 e7a9      	LDI  R26,LOW(_what)
000964 e0b5      	LDI  R27,HIGH(_what)
000965 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000966 940e 083b 	CALL _lcd_puts
000968 2dac      	MOV  R26,R12
000969 5da0      	SUBI R26,-LOW(48)
00096a 940c 0821 	JMP  _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x8:
00096c e9a2      	LDI  R26,LOW(_gfx_addr_G100)
00096d e0b5      	LDI  R27,HIGH(_gfx_addr_G100)
00096e 91ed      	LD   R30,X+
00096f 91fd      	LD   R31,X+
000970 9631      	ADIW R30,1
000971 93fe      	ST   -X,R31
000972 93ee      	ST   -X,R30
000973 9731      	SBIW R30,1
000974 56ec      	SUBI R30,LOW(-_gfx_buffer_G100)
000975 4ffa      	SBCI R31,HIGH(-_gfx_buffer_G100)
000976 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000977 93e0 0064 	STS  100,R30
000979 91e0 0065 	LDS  R30,101
00097b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00097c 0fea      	ADD  R30,R26
00097d 1ffb      	ADC  R31,R27
00097e 83ee      	STD  Y+6,R30
00097f 83ff      	STD  Y+6+1,R31
000980 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xB:
000981 85ec      	LDD  R30,Y+12
000982 93ea      	ST   -Y,R30
000983 81ef      	LDD  R30,Y+7
000984 85f8      	LDD  R31,Y+7+1
000985 9631      	ADIW R30,1
000986 83ef      	STD  Y+7,R30
000987 87f8      	STD  Y+7+1,R31
000988 9731      	SBIW R30,1
000989 93fa      	ST   -Y,R31
00098a 93ea      	ST   -Y,R30
00098b e0a0      	LDI  R26,LOW(0)
00098c 940c 0907 	JMP  _glcd_writemem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
00098e 930a      	ST   -Y,R16
00098f 89a8      	LDD  R26,Y+16
000990 940c 0390 	JMP  _pcd8544_setaddr_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xD:
000992 85ec      	LDD  R30,Y+12
000993 93ea      	ST   -Y,R30
000994 81ef      	LDD  R30,Y+7
000995 85f8      	LDD  R31,Y+7+1
000996 9631      	ADIW R30,1
000997 83ef      	STD  Y+7,R30
000998 87f8      	STD  Y+7+1,R31
000999 9731      	SBIW R30,1
00099a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xE:
00099b 2766      	CLR  R22
00099c 2777      	CLR  R23
00099d 01df      	MOVW R26,R30
00099e 01cb      	MOVW R24,R22
00099f 940c 08e8 	JMP  _glcd_readmem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0009a1 935a      	ST   -Y,R21
0009a2 85aa      	LDD  R26,Y+10
0009a3 940c 08c0 	JMP  _glcd_mappixcolor1bit
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
0009a5 930a      	ST   -Y,R16
0009a6 9503      	INC  R16
0009a7 89e8      	LDD  R30,Y+16
0009a8 93ea      	ST   -Y,R30
0009a9 935a      	ST   -Y,R21
0009aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
0009ab 2f5e      	MOV  R21,R30
0009ac 85ec      	LDD  R30,Y+12
0009ad 93ea      	ST   -Y,R30
0009ae 81af      	LDD  R26,Y+7
0009af 85b8      	LDD  R27,Y+7+1
0009b0 2788      	CLR  R24
0009b1 2799      	CLR  R25
0009b2 940e 08e8 	CALL _glcd_readmem
0009b4 2e1e      	MOV  R1,R30
0009b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x12:
0009b6 930a      	ST   -Y,R16
0009b7 9503      	INC  R16
0009b8 89e8      	LDD  R30,Y+16
0009b9 93ea      	ST   -Y,R30
0009ba 85ee      	LDD  R30,Y+14
0009bb 93ea      	ST   -Y,R30
0009bc 85e9      	LDD  R30,Y+9
0009bd 85fa      	LDD  R31,Y+9+1
0009be 9631      	ADIW R30,1
0009bf 87e9      	STD  Y+9,R30
0009c0 87fa      	STD  Y+9+1,R31
0009c1 9731      	SBIW R30,1
0009c2 cfd8      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
0009c3 93ba      	ST   -Y,R27
0009c4 93aa      	ST   -Y,R26
0009c5 81a8      	LD   R26,Y
0009c6 81b9      	LDD  R27,Y+1
0009c7 940e 0a40 	CALL __CPW02
0009c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
0009ca 940e 0a44 	CALL __SAVELOCR6
                +
0009cc 91e0 054e+LDS R30 , _glcd_state + ( 4 )
0009ce 91f0 054f+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
0009d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0009d1 01f8      	MOVW R30,R16
                +
0009d2 5f0f     +SUBI R16 , LOW ( - 1 )
0009d3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0009d4 9004      	LPM  R0,Z
0009d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x16:
                +
0009d6 91e0 054e+LDS R30 , _glcd_state + ( 4 )
0009d8 91f0 054f+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
0009da 9631      	ADIW R30,1
0009db 91e4      	LPM  R30,Z
0009dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x17:
0009dd 93ea      	ST   -Y,R30
0009de e0e0      	LDI  R30,LOW(0)
0009df 93ea      	ST   -Y,R30
0009e0 e0e0      	LDI  R30,LOW(0)
0009e1 e0f0      	LDI  R31,HIGH(0)
0009e2 93fa      	ST   -Y,R31
0009e3 93ea      	ST   -Y,R30
0009e4 e0a9      	LDI  R26,LOW(9)
0009e5 940c 04c9 	JMP  _glcd_block
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
0009e7 81a9      	LDD  R26,Y+1
0009e8 81ba      	LDD  R27,Y+1+1
0009e9 91ed      	LD   R30,X+
0009ea 83a9      	STD  Y+1,R26
0009eb 83ba      	STD  Y+1+1,R27
0009ec 2f1e      	MOV  R17,R30
0009ed 30e0      	CPI  R30,0
0009ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
0009ef 940e 07f9 	CALL __lcd_write_data
0009f1 e0a3      	LDI  R26,LOW(3)
0009f2 e0b0      	LDI  R27,0
0009f3 940c 09fd 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1A:
0009f5 e3a0      	LDI  R26,LOW(48)
0009f6 940e 07d4 	CALL __lcd_write_nibble_G103
                +
0009f8 ec88     +LDI R24 , LOW ( 200 )
0009f9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0009fa 9701     +SBIW R24 , 1
0009fb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0009fc 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0009fd 9610      	adiw r26,0
0009fe f039      	breq __delay_ms1
                 __delay_ms0:
                +
0009ff ed80     +LDI R24 , LOW ( 0x7D0 )
000a00 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000a01 9701     +SBIW R24 , 1
000a02 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000a03 95a8      	wdr
000a04 9711      	sbiw r26,1
000a05 f7c9      	brne __delay_ms0
                 __delay_ms1:
000a06 9508      	ret
                 
                 __LSLB12:
000a07 23ee      	TST  R30
000a08 2e0e      	MOV  R0,R30
000a09 2fea      	MOV  R30,R26
000a0a f019      	BREQ __LSLB12R
                 __LSLB12L:
000a0b 0fee      	LSL  R30
000a0c 940a      	DEC  R0
000a0d f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000a0e 9508      	RET
                 
                 __LSRB12:
000a0f 23ee      	TST  R30
000a10 2e0e      	MOV  R0,R30
000a11 2fea      	MOV  R30,R26
000a12 f019      	BREQ __LSRB12R
                 __LSRB12L:
000a13 95e6      	LSR  R30
000a14 940a      	DEC  R0
000a15 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
000a16 9508      	RET
                 
                 __MULW12U:
000a17 9ffa      	MUL  R31,R26
000a18 2df0      	MOV  R31,R0
000a19 9feb      	MUL  R30,R27
000a1a 0df0      	ADD  R31,R0
000a1b 9fea      	MUL  R30,R26
000a1c 2de0      	MOV  R30,R0
000a1d 0df1      	ADD  R31,R1
000a1e 9508      	RET
                 
                 __GETW1P:
000a1f 91ed      	LD   R30,X+
000a20 91fc      	LD   R31,X
000a21 9711      	SBIW R26,1
000a22 9508      	RET
                 
                 __EEPROMRDB:
000a23 99e1      	SBIC EECR,EEWE
000a24 cffe      	RJMP __EEPROMRDB
000a25 93ff      	PUSH R31
000a26 b7ff      	IN   R31,SREG
000a27 94f8      	CLI
000a28 bbae      	OUT  EEARL,R26
000a29 bbbf      	OUT  EEARH,R27
000a2a 9ae0      	SBI  EECR,EERE
000a2b b3ed      	IN   R30,EEDR
000a2c bfff      	OUT  SREG,R31
000a2d 91ff      	POP  R31
000a2e 9508      	RET
                 
                 __EEPROMWRB:
000a2f 9be1      	SBIS EECR,EEWE
000a30 c002      	RJMP __EEPROMWRB1
000a31 95a8      	WDR
000a32 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000a33 b79f      	IN   R25,SREG
000a34 94f8      	CLI
000a35 bbae      	OUT  EEARL,R26
000a36 bbbf      	OUT  EEARH,R27
000a37 9ae0      	SBI  EECR,EERE
000a38 b38d      	IN   R24,EEDR
000a39 17e8      	CP   R30,R24
000a3a f019      	BREQ __EEPROMWRB0
000a3b bbed      	OUT  EEDR,R30
000a3c 9ae2      	SBI  EECR,EEMWE
000a3d 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000a3e bf9f      	OUT  SREG,R25
000a3f 9508      	RET
                 
                 __CPW02:
000a40 2400      	CLR  R0
000a41 160a      	CP   R0,R26
000a42 060b      	CPC  R0,R27
000a43 9508      	RET
                 
                 __SAVELOCR6:
000a44 935a      	ST   -Y,R21
                 __SAVELOCR5:
000a45 934a      	ST   -Y,R20
                 __SAVELOCR4:
000a46 933a      	ST   -Y,R19
                 __SAVELOCR3:
000a47 932a      	ST   -Y,R18
                 __SAVELOCR2:
000a48 931a      	ST   -Y,R17
000a49 930a      	ST   -Y,R16
000a4a 9508      	RET
                 
                 __LOADLOCR6:
000a4b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000a4c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000a4d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000a4e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000a4f 8119      	LDD  R17,Y+1
000a50 8108      	LD   R16,Y
000a51 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  34 r1 :   7 r2 :   0 r3 :   0 r4 :   6 r5 :   4 r6 :   3 r7 :   1 
r8 :  13 r9 :   5 r10:   4 r11:   6 r12:  10 r13:   4 r14:   0 r15:   2 
r16:  49 r17:  82 r18:  26 r19:  35 r20:  18 r21:  32 r22:  18 r23:   3 
r24:  34 r25:  15 r26: 288 r27:  91 r28:  18 r29:   1 r30: 703 r31: 127 
x  :  21 y  : 421 z  :  25 
Registers used: 32 out of 35 (91.4%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :  24 
adiw  :  27 and   :   8 andi  :  26 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  45 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   8 brmi  :   0 brne  :  76 brpl  :   1 brsh  :  18 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 130 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  27 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   9 
cp    :  27 cpc   :  14 cpi   :  81 cpse  :   0 dec   :   7 des   :   0 
elpm  :   0 eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   8 inc   :   4 jmp   :  63 ld    :  65 ldd   : 193 
ldi   : 245 lds   :  46 lpm   :  23 lsl   :   5 lsr   :  15 mov   :  87 
movw  :  39 mul   :   5 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   7 ori   :  16 out   :  26 pop   :  11 push  :  11 rcall :  72 
ret   :  55 reti  :   1 rjmp  : 103 rol   :   1 ror   :   0 sbc   :   1 
sbci  :  10 sbi   :  22 sbic  :   1 sbis  :   1 sbiw  :  26 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 157 std   :  37 sts   :  50 sub   :   8 subi  :  37 
swap  :   1 tst   :   7 wdr   :   2 
Instructions used: 64 out of 117 (54.7%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0014a4   4632    652   5284  131072   4.0%
[.dseg] 0x000100 0x000796      0    662    662    4096  16.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 14 warnings
